}
if(stepwise[2] <= 50 & (start_time - df$time[which(df$`b_ex_25%` > 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_25%` > 0)][1]
end_time <- df$time[which(df$`b_ex_25%` > 0)][length(which(df$`b_ex_25%` > 0))] + 1
move_time <- end_time - start_time
}
}else if(stepwise[1] >= 60 & stepwise[2] <= 60 & length(which(df$`b_ex_20%` > 0)) > 0){
start_time <- df$time[which(df$`b_ex_20%` > 0)][1]
end_time <- df$time[which(df$`b_ex_20%` > 0)][length(which(df$`b_ex_20%` > 0))] + 1
move_time <- end_time - start_time
if(stepwise[2] <= 50 & (start_time - df$time[which(df$`b_ex_25%` > 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_25%` > 0)][1]
end_time <- df$time[which(df$`b_ex_25%` > 0)][length(which(df$`b_ex_25%` > 0))] + 1
move_time <- end_time - start_time
}
}else if(stepwise[1] >= 50 & stepwise[2] <= 50 & length(which(df$`b_ex_25%` > 0)) > 0){
start_time <- df$time[which(df$`b_ex_25%` > 0)][1]
end_time <- df$time[which(df$`b_ex_25%` > 0)][length(which(df$`b_ex_25%` > 0))] + 1
move_time <- end_time - start_time
}else{
start_time <- Inf
end_time <- Inf
move_time <- Inf
}
}else{  # ex_sign == "negative"
if(stepwise[1] >= 99 & stepwise[2] <= 99 & length(which(df$`b_ex_99.5%` < 0)) > 0){
start_time <- df$time[which(df$`b_ex_99.5%` < 0)][1]
end_time <- df$time[which(df$`b_ex_99.5%` < 0)][length(which(df$`b_ex_99.5%` < 0))] + 1
move_time <- end_time - start_time
if(stepwise[2] <= 95 & (start_time - df$time[which(df$`b_ex_97.5%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_97.5%` < 0)][1]
end_time <- df$time[which(df$`b_ex_97.5%` < 0)][length(which(df$`b_ex_97.5%` < 0))] + 1
move_time <- end_time - start_time
}
if(stepwise[2] <= 90 & (start_time - df$time[which(df$`b_ex_95%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_95%` < 0)][1]
end_time <- df$time[which(df$`b_ex_95%` < 0)][length(which(df$`b_ex_95%` < 0))] + 1
move_time <- end_time - start_time
}
if(stepwise[2] <= 80 & (start_time - df$time[which(df$`b_ex_90%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_90%` < 0)][1]
end_time <- df$time[which(df$`b_ex_90%` < 0)][length(which(df$`b_ex_90%` < 0))] + 1
move_time <- end_time - start_time
}
if(stepwise[2] <= 70 & (start_time - df$time[which(df$`b_ex_85%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_85%` < 0)][1]
end_time <- df$time[which(df$`b_ex_85%` < 0)][length(which(df$`b_ex_85%` < 0))] + 1
move_time <- end_time - start_time
}
if(stepwise[2] <= 60 & (start_time - df$time[which(df$`b_ex_80%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_80%` < 0)][1]
end_time <- df$time[which(df$`b_ex_80%` < 0)][length(which(df$`b_ex_80%` < 0))] + 1
move_time <- end_time - start_time
}
if(stepwise[2] <= 50 & (start_time - df$time[which(df$`b_ex_75%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_75%` < 0)][1]
end_time <- df$time[which(df$`b_ex_75%` < 0)][length(which(df$`b_ex_75%` < 0))] + 1
move_time <- end_time - start_time
}
}else if(stepwise[1] >= 95 & stepwise[2] <= 95 & length(which(df$`b_ex_97.5%` < 0)) > 0){
start_time <- df$time[which(df$`b_ex_97.5%` < 0)][1]
end_time <- df$time[which(df$`b_ex_97.5%` < 0)][length(which(df$`b_ex_97.5%` < 0))] + 1
move_time <- end_time - start_time
if(stepwise[2] <= 90 & (start_time - df$time[which(df$`b_ex_95%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_95%` < 0)][1]
end_time <- df$time[which(df$`b_ex_95%` < 0)][length(which(df$`b_ex_95%` < 0))] + 1
move_time <- end_time - start_time
}
if(stepwise[2] <= 80 & (start_time - df$time[which(df$`b_ex_90%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_90%` < 0)][1]
end_time <- df$time[which(df$`b_ex_90%` < 0)][length(which(df$`b_ex_90%` < 0))] + 1
move_time <- end_time - start_time
}
if(stepwise[2] <= 70 & (start_time - df$time[which(df$`b_ex_85%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_85%` < 0)][1]
end_time <- df$time[which(df$`b_ex_85%` < 0)][length(which(df$`b_ex_85%` < 0))] + 1
move_time <- end_time - start_time
}
if(stepwise[2] <= 60 & (start_time - df$time[which(df$`b_ex_80%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_80%` < 0)][1]
end_time <- df$time[which(df$`b_ex_80%` < 0)][length(which(df$`b_ex_80%` < 0))] + 1
move_time <- end_time - start_time
}
if(stepwise[2] <= 50 & (start_time - df$time[which(df$`b_ex_75%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_75%` < 0)][1]
end_time <- df$time[which(df$`b_ex_75%` < 0)][length(which(df$`b_ex_75%` < 0))] + 1
move_time <- end_time - start_time
}
}else if(stepwise[1] >= 90 & stepwise[2] <= 90 & length(which(df$`b_ex_95%` < 0)) > 0){
start_time <- df$time[which(df$`b_ex_95%` < 0)][1]
end_time <- df$time[which(df$`b_ex_95%` < 0)][length(which(df$`b_ex_95%` < 0))] + 1
move_time <- end_time - start_time
if(stepwise[2] <= 80 & (start_time - df$time[which(df$`b_ex_90%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_90%` < 0)][1]
end_time <- df$time[which(df$`b_ex_90%` < 0)][length(which(df$`b_ex_90%` < 0))] + 1
move_time <- end_time - start_time
}
if(stepwise[2] <= 70 & (start_time - df$time[which(df$`b_ex_85%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_85%` < 0)][1]
end_time <- df$time[which(df$`b_ex_85%` < 0)][length(which(df$`b_ex_85%` < 0))] + 1
move_time <- end_time - start_time
}
if(stepwise[2] <= 60 & (start_time - df$time[which(df$`b_ex_80%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_80%` < 0)][1]
end_time <- df$time[which(df$`b_ex_80%` < 0)][length(which(df$`b_ex_80%` < 0))] + 1
move_time <- end_time - start_time
}
if(stepwise[2] <= 50 & (start_time - df$time[which(df$`b_ex_75%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_75%` < 0)][1]
end_time <- df$time[which(df$`b_ex_75%` < 0)][length(which(df$`b_ex_75%` < 0))] + 1
move_time <- end_time - start_time
}
}else if(stepwise[1] >= 80 & stepwise[2] <= 80 & length(which(df$`b_ex_90%` < 0)) > 0){
start_time <- df$time[which(df$`b_ex_90%` < 0)][1]
end_time <- df$time[which(df$`b_ex_90%` < 0)][length(which(df$`b_ex_90%` < 0))] + 1
move_time <- end_time - start_time
if(stepwise[2] <= 70 & (start_time - df$time[which(df$`b_ex_85%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_85%` < 0)][1]
end_time <- df$time[which(df$`b_ex_85%` < 0)][length(which(df$`b_ex_85%` < 0))] + 1
move_time <- end_time - start_time
}
if(stepwise[2] <= 60 & (start_time - df$time[which(df$`b_ex_80%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_80%` < 0)][1]
end_time <- df$time[which(df$`b_ex_80%` < 0)][length(which(df$`b_ex_80%` < 0))] + 1
move_time <- end_time - start_time
}
if(stepwise[2] <= 50 & (start_time - df$time[which(df$`b_ex_75%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_75%` < 0)][1]
end_time <- df$time[which(df$`b_ex_75%` < 0)][length(which(df$`b_ex_75%` < 0))] + 1
move_time <- end_time - start_time
}
}else if(stepwise[1] >= 70 & stepwise[2] <= 70 & length(which(df$`b_ex_85%` < 0)) > 0){
start_time <- df$time[which(df$`b_ex_85%` < 0)][1]
end_time <- df$time[which(df$`b_ex_85%` < 0)][length(which(df$`b_ex_85%` < 0))] + 1
move_time <- end_time - start_time
if(stepwise[2] <= 60 & (start_time - df$time[which(df$`b_ex_80%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_80%` < 0)][1]
end_time <- df$time[which(df$`b_ex_80%` < 0)][length(which(df$`b_ex_80%` < 0))] + 1
move_time <- end_time - start_time
}
if(stepwise[2] <= 50 & (start_time - df$time[which(df$`b_ex_75%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_75%` < 0)][1]
end_time <- df$time[which(df$`b_ex_75%` < 0)][length(which(df$`b_ex_75%` < 0))] + 1
move_time <- end_time - start_time
}
}else if(stepwise[1] >= 60 & stepwise[2] <= 60 & length(which(df$`b_ex_80%` < 0)) > 0){
start_time <- df$time[which(df$`b_ex_80%` < 0)][1]
end_time <- df$time[which(df$`b_ex_80%` < 0)][length(which(df$`b_ex_80%` < 0))] + 1
move_time <- end_time - start_time
if(stepwise[2] <= 50 & (start_time - df$time[which(df$`b_ex_75%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_75%` < 0)][1]
end_time <- df$time[which(df$`b_ex_75%` < 0)][length(which(df$`b_ex_75%` < 0))] + 1
move_time <- end_time - start_time
}
}else if(stepwise[1] >= 50 & stepwise[2] <= 50 & length(which(df$`b_ex_75%` < 0)) > 0){
start_time <- df$time[which(df$`b_ex_75%` < 0)][1]
end_time <- df$time[which(df$`b_ex_75%` < 0)][length(which(df$`b_ex_75%` < 0))] + 1
move_time <- end_time - start_time
}else{
start_time <- Inf
end_time <- Inf
move_time <- Inf
}
}
mv_time <- data.frame(start_time = start_time, end_time = end_time, move_time = move_time)
df_mv <- rbind(df_mv, mv_time)
mv_time
stepwise
### Test the package
devtools::document()
devtools::build_manual()
devtools::check()
devtools::check()
### Test the package
devtools::document()
devtools::build_manual()
devtools::check()
#install.packages("devtools")
devtools::install_github("hnishio/cellssm")
### Test the package
devtools::document()
devtools::build_manual()
devtools::check()
#install.packages("devtools")
devtools::install_github("hnishio/cellssm")
### Test the package
devtools::document()
devtools::build_manual()
devtools::check()
#install.packages("devtools")
devtools::install_github("hnishio/cellssm")
### Test the package
devtools::document()
### Test the package
devtools::document()
# Load packages
library(cellssm)
# Create an output directory
out <- "05_lm_dist_beta"
if(file.exists(out)==F){
dir.create(out, recursive=T)
}
## Bayes
# Load data of chloroplast movements
mvtime <- as.data.frame(data.table::fread(
"02_ssm_individual/csv/ssm_individual_chloroplast_mvtime.csv"))
# Linear regression
glist <- lm_dist_beta(cell_list = cell_list, mvtime = mvtime,
ssm_path = "02_ssm_individual",
ssm_method = "Bayes", res_name = "chloroplast",
ex_name = "microbeam", unit1 = "micrometer", unit2 = "min")
# Load data
data("cell1", "cell2", "cell3", "cell4", "chloroplast_mvtime")
cell_list <- list(cell1, cell2, cell3, cell4)
# Linear regression
glist <- lm_dist_beta(cell_list = cell_list, mvtime = mvtime,
ssm_path = "02_ssm_individual",
ssm_method = "Bayes", res_name = "chloroplast",
ex_name = "microbeam", unit1 = "micrometer", unit2 = "min")
# Save output
g <- (glist[[1]] + labs(tag = "A")) + (glist[[2]] + labs(tag = "B")) +
(glist[[3]] + labs(tag = "C")) + (glist[[4]] + labs(tag = "D")) +
(glist[[5]] + labs(tag = "E")) +
patchwork::plot_layout(nrow = 2)
suppressWarnings(ggsave(paste0(out, "/individual_chloroplast_lm_dist_beta_robustF.pdf"),
g, height = 104, width = 168, units = "mm"))
# Robust linear regression
glist <- lm_dist_beta(cell_list = cell_list, mvtime = mvtime,
ssm_path = "02_ssm_individual", robust = T,
ssm_method = "Bayes", res_name = "chloroplast",
ex_name = "microbeam", unit1 = "micrometer", unit2 = "min")
# Save output
g <- (glist[[1]] + labs(tag = "A")) + (glist[[2]] + labs(tag = "B")) +
(glist[[3]] + labs(tag = "C")) + (glist[[4]] + labs(tag = "D")) +
(glist[[5]] + labs(tag = "E")) +
patchwork::plot_layout(nrow = 2)
suppressWarnings(ggsave(paste0(out, "/individual_chloroplast_lm_dist_beta_robustT.pdf"),
g, height = 104, width = 168, units = "mm"))
### Test the package
devtools::document()
devtools::build_manual()
# Load packages
library(cellssm)
# Create an output directory
out <- "16_lm_dist_start"
if(file.exists(out)==F){
dir.create(out, recursive=T)
}
# Load packages
library(cellssm)
# Create an output directory
out <- "06_lm_dist_start"
if(file.exists(out)==F){
dir.create(out, recursive=T)
}
# dist vs. start
glist <- lm_dist_start(cell_list = cell_list, mvtime = mvtime,
ex_name = "microbeam", unit1 = "micrometer", unit2 = "min")
# Save output
g <- glist[[1]] + glist[[2]] + glist[[3]] + glist[[4]] + glist[[5]] +
patchwork::plot_layout(ncol = 3)
ggsave(paste0(out, "/individual_chloroplast_lm_dist_start_robustF.pdf"),
g, height = 110, width = 50*3, units = "mm")
# dist vs. start
glist <- lm_dist_start(cell_list = cell_list, mvtime = mvtime, robust = T,
ex_name = "microbeam", unit1 = "micrometer", unit2 = "min")
# Save output
g <- glist[[1]] + glist[[2]] + glist[[3]] + glist[[4]] + glist[[5]] +
patchwork::plot_layout(ncol = 3)
ggsave(paste0(out, "/individual_chloroplast_lm_dist_start_robustT.pdf"),
g, height = 110, width = 50*3, units = "mm")
# Load packages
library(cellssm)
# Create an output directory
out <- "07_lm_signal"
if(file.exists(out)==F){
dir.create(out, recursive=T)
}
# Linear regression
glist <- lm_signal(cell_list = cell_list, mvtime = mvtime,
ex_name = "microbeam", unit1 = "micrometer", unit2 = "min")
# Save output
g <- glist[[1]] + glist[[2]] + glist[[3]] + glist[[4]] + glist[[5]] + glist[[6]] +
plot_layout(ncol = 3)
suppressWarnings(ggsave(paste0(out, "/individual_chloroplast_lm_signal_robustF.pdf"),
g, height = 110, width = 50*3, units = "mm"))
# Linear regression
glist <- lm_signal(cell_list = cell_list, mvtime = mvtime, robust = T,
ex_name = "microbeam", unit1 = "micrometer", unit2 = "min")
# Save output
g <- glist[[1]] + glist[[2]] + glist[[3]] + glist[[4]] + glist[[5]] + glist[[6]] +
plot_layout(ncol = 3)
suppressWarnings(ggsave(paste0(out, "/individual_chloroplast_lm_signal_robustT.pdf"),
g, height = 110, width = 50*3, units = "mm"))
### Test the package
devtools::document()
devtools::build_manual()
devtools::check()
help(cellssm)
#install.packages("devtools")
devtools::install_github("hnishio/cellssm")
round(89 / 10, 0)
round(90 / 10, 0)
round(94 / 10, 0)
round(95 / 10, 0)
### Test the package
devtools::document()
devtools::build_manual()
devtools::check()
help(nomodel)
data("cell1", "cell2", "cell3", "cell4", "visual")
cell_list <- list(cell1, cell2, cell3, cell4)
period = 5
fold = 2
i=1
j=1
# Distance
Y = cell_list[[i]][,j+2]
Y
## Estimate the start of movement
## definition1: approaching to light
st_index <- min(which(cell_list[[i]]$ex == 1)) : max(which(cell_list[[i]]$ex == 1))
st_index1 <- st_index[Y[st_index] > Y[st_index+1]] # decrease at the next point
st_index1 <- st_index1[-length(st_index1)]
st_index
st_index1
## definition2: moving average of differences (sma_period points) are negative
diff <- diff(Y[st_index]) #difference between adjacent data
sma <- NULL
sma_period <- round(N_ex / 10, 0)
## definition2: moving average of differences (sma_period points) are negative
N_ex <- sum(cell_list[[i]]$ex == 1)
diff <- diff(Y[st_index]) #difference between adjacent data
sma <- NULL
sma_period <- round(N_ex / 10, 0)
sma_period
for(k in 1:(length(diff)-(sma_period-1))){
sma[k] <- mean(diff[k:(k+(sma_period-1))]) # sma of next sma_period differences
}
st_index2 <- st_index[which(sma < 0)]
st_index2
## definition3: difference from the data after period tp is larger than fold*period/N_ex times of max - min
st_index3 <- st_index[(Y[st_index] - Y[st_index+period]) >
(fold*period/N_ex)*(max(Y[st_index]) - min(Y[st_index]))]
st_index3
(length(st_index3)-4)
(Y[st_index] - Y[st_index+period]) >
(fold*period/N_ex)*(max(Y[st_index]) - min(Y[st_index]))
st_index
period=10
## definition3: difference from the data after period tp is larger than fold*period/N_ex times of max - min
st_index3 <- st_index[(Y[st_index] - Y[st_index+period]) >
(fold*period/N_ex)*(max(Y[st_index]) - min(Y[st_index]))]
st_index3
## definition3: difference from the data after period tp is larger than fold*period/N_ex times of max - min
st_index3 <- st_index[(Y[st_index] - Y[st_index+period]) >
(fold*period/N_ex)*(max(Y[st_index]) - min(Y[st_index]))]
st_index3 <- st_index3[-((length(st_index3)-(period-1)):length(st_index3))]
st_index3
period=5
## definition3: difference from the data after period tp is larger than fold*period/N_ex times of max - min
st_index3 <- st_index[(Y[st_index] - Y[st_index+period]) >
(fold*period/N_ex)*(max(Y[st_index]) - min(Y[st_index]))]
st_index3
st_index3 <- st_index3[-((length(st_index3)-(period-1)):length(st_index3))]
st_index3
### Test the package
devtools::document()
devtools::build_manual()
devtools::check()
#install.packages("devtools")
devtools::install_github("hnishio/cellssm")
# Load packages
library(cellssm)
help(nomodel)
# Load data of chloroplast movements
data("cell1", "cell2", "cell3", "cell4", "visual")
cell_list <- list(cell1, cell2, cell3, cell4)
period = 5
fold = 2
i=1;j=1
# File name
if(!is.null(df_idx) & !is.null(res_idx)){
file_name <- paste0(df_name, df_idx[j], "_", res_name, res_idx[j])
}else{
file_name <- paste0(df_name, i, "_", res_name, j)
}
df_idx = NULL
res_idx = NULL
# File name
if(!is.null(df_idx) & !is.null(res_idx)){
file_name <- paste0(df_name, df_idx[j], "_", res_name, res_idx[j])
}else{
file_name <- paste0(df_name, i, "_", res_name, j)
}
df_name = "cell"
res_name = "organelle"
# Distance
Y = cell_list[[i]][,j+2]
## Estimate the start of movement
## definition1: approaching to light
st_index <- min(which(cell_list[[i]]$ex == 1)) : max(which(cell_list[[i]]$ex == 1))
st_index
st_index1 <- st_index[Y[st_index] > Y[st_index+1]] # decrease at the next point
st_index1
diff <- diff(Y[st_index]) #difference between adjacent data
diff
diff[1] < 0
diff[3] < 0
diff[1:3] < 0
consecutive=3
(1+consecutive-1)
sum(diff[1:(1+consecutive-1)] < 0) == consecutive
sum(diff[3:(3+consecutive-1)] < 0) == consecutive
st_index1
consecutive=1
st_index1 <- NULL
for(k in 1:length(diff)){
if(sum(diff[k:(k+consecutive-1)] < 0) == consecutive){
st_index1 <- c(st_index1, st_index[k])
}
}
st_index1
consecutive=3
for(k in 1:length(diff)){
if(sum(diff[k:(k+consecutive-1)] < 0) == consecutive){
st_index1 <- c(st_index1, st_index[k])
}
}
consecutive=1
st_index1 <- NULL
for(k in 1:(length(diff)-consecutive+1)){
if(sum(diff[k:(k+consecutive-1)] < 0) == consecutive){
st_index1 <- c(st_index1, st_index[k])
}
}
st_index1
length(diff)
st_index1 <- NULL
for(k in 1:(length(diff)-consecutive+1)){
if(sum(diff[k:(k+consecutive-1)] < 0) == consecutive){
st_index1 <- c(st_index1, st_index[k])
}
}
st_index1
consecutive=3
st_index1 <- NULL
for(k in 1:(length(diff)-consecutive+1)){
if(sum(diff[k:(k+consecutive-1)] < 0) == consecutive){
st_index1 <- c(st_index1, st_index[k])
}
}
st_index1
## definition2: moving average of differences (sma_period points) are negative
N_ex <- sum(cell_list[[i]]$ex == 1)
sma <- NULL
sma_period <- round(N_ex / 10, 0)
for(k in 1:(length(diff)-(sma_period-1))){
sma[k] <- mean(diff[k:(k+(sma_period-1))]) # sma of next sma_period differences
}
st_index2 <- st_index[which(sma < 0)]
st_index2
sma_period
## definition3: difference from the data after period tp is larger than fold*period/N_ex times of max - min
st_index3 <- st_index[(Y[st_index] - Y[st_index+period]) >
(fold*period/N_ex)*(max(Y[st_index]) - min(Y[st_index]))]
st_index3 <- st_index3[-((length(st_index3)-(period-1)):length(st_index3))]
st_index3
## Overlap of def1, def2 and def3
st_index1_2 <- intersect(st_index1, st_index2)
st_index1_2_3 <- intersect(st_index1_2, st_index3)
st_index_first <- min(st_index1_2_3, na.rm = T)
st_index_last <- max(st_index1_2_3, na.rm = T)
st_index_first
st_index_last
start_time <- cell_list[[i]]$time[st_index_first] #time at st_index_first
end_time <- cell_list[[i]]$time[st_index_last] #time at st_index_last
move_time <- end_time - start_time
start_time
end_time
move_time
### Test the package
devtools::document()
devtools::build_manual()
help(nomodel)
devtools::check()
#install.packages("devtools")
devtools::install_github("hnishio/cellssm")
help(graph)
??graph
### Test the package
devtools::document()
devtools::build_manual()
devtools::check()
library(cellssm)
help(nomodel)
### Test the package
devtools::document()
devtools::build_manual()
devtools::check()
### Test the package
devtools::document()
devtools::build_manual()
devtools::check()
#install.packages("devtools")
devtools::install_github("hnishio/cellssm")
### Test the package
devtools::document()
devtools::build_manual()
devtools::check()
#install.packages("devtools")
devtools::install_github("hnishio/cellssm")
