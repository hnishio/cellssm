unit1 = "micrometer", unit2 = "min")
### Test the package
devtools::document()
devtools::check()
#install.packages("devtools")
devtools::install_github("hnishio/cellssm")
# Load packages
library(cellssm)
# Create an output directory
out <- "07_lm_signal"
if(file.exists(out)==F){
dir.create(out, recursive=T)
}
# Load data
data("cell1", "cell2", "cell3", "cell4", "visual")
cell_list <- list(cell1, cell2, cell3, cell4)
## Bayes
# Load data of chloroplast movements
mvtime <- as.data.frame(data.table::fread(
"02_ssm_individual/csv/ssm_individual_chloroplast_mvtime.csv"))
ex_name = "microbeam"
unit1 = "micrometer"
unit2 = "min"
df_name = "cell"
ps = 7
theme_plot = "bw"
## Binding variables locally to the function
predicted <- ..rr.label.. <- NULL
## Error message
if(length(cell_list) != length(unique(mvtime[,1]))){
stop(paste("The length of 'cell_list' should be the same as the unique identifier at 'mvtime$cell !!'"))
}
## Adjust data.frame
if(ncol(mvtime) > 5){
df <- mvtime[,1:4]
names(df)[1:4] <- c("cell", "each", "visual", "predicted")
}else{
df <- mvtime[,1:3]
names(df)[1:3] <- c("cell", "each", "predicted")
}
distance <- NULL
for(i in 1:length(cell_list)){
distance <- c(distance, as.numeric(cell_list[[i]][min(which(cell_list[[i]]$ex == 1))-1,-(1:2)]))
}
df$distance <- distance
df <- df[!is.infinite(rowSums(df)),]
df
## label
if(unit1=="meter"){
label_y <- bquote(paste("Distance from ", .(ex_name), " ", (m)))
label_x <- bquote(paste("Start time ", (.(unit2))))
}else if(unit1=="centimeter"){
label_y <- bquote(paste("Distance from ", .(ex_name), " ", (cm)))
label_x <- bquote(paste("Start time ", (.(unit2))))
}else if(unit1=="millimeter"){
label_y <- bquote(paste("Distance from ", .(ex_name), " ", (mm)))
label_x <- bquote(paste("Start time ", (.(unit2))))
}else if(unit1=="micrometer"){
label_y <- bquote(paste("Distance from ", .(ex_name), " ", (mu*m)))
label_x <- bquote(paste("Start time ", (.(unit2))))
}else if(unit1=="nanometer"){
label_y <- bquote(paste("Distance from ", .(ex_name), " ", (nm)))
label_x <- bquote(paste("Start time ", (.(unit2))))
}else{
label_y <- bquote(paste("Distance from ", .(ex_name), " (", .(unit1), ")"))
label_x <- bquote(paste("Start time ", (.(unit2))))
}
## Theme
if(theme_plot == "bw"){
theme_plot2 <- theme_bw(base_size = ps)
}else if(theme_plot == "light"){
theme_plot2 <- theme_light(base_size = ps)
}else if(theme_plot == "classic"){
theme_plot2 <- theme_classic(base_size = ps)
}else if(theme_plot == "gray"){
theme_plot2 <- theme_gray(base_size = ps)
}else if(theme_plot == "dark"){
theme_plot2 <- theme_dark(base_size = ps)
}else if(theme_plot == "test"){
theme_plot2 <- theme_test(base_size = ps)
}else if(theme_plot == "minimal"){
theme_plot2 <- theme_minimal(base_size = ps)
}else if(theme_plot == "void"){
theme_plot2 <- theme_void(base_size = ps)
}
library(ggplot2)
## Theme
if(theme_plot == "bw"){
theme_plot2 <- theme_bw(base_size = ps)
}else if(theme_plot == "light"){
theme_plot2 <- theme_light(base_size = ps)
}else if(theme_plot == "classic"){
theme_plot2 <- theme_classic(base_size = ps)
}else if(theme_plot == "gray"){
theme_plot2 <- theme_gray(base_size = ps)
}else if(theme_plot == "dark"){
theme_plot2 <- theme_dark(base_size = ps)
}else if(theme_plot == "test"){
theme_plot2 <- theme_test(base_size = ps)
}else if(theme_plot == "minimal"){
theme_plot2 <- theme_minimal(base_size = ps)
}else if(theme_plot == "void"){
theme_plot2 <- theme_void(base_size = ps)
}
## Plotting for each cell
glist <- list()
i=1
# Title of the plots
if(length(cell_list) == 1){
titles <- NULL
}else{
titles <- paste(stringr::str_to_title(df_name), " ", i, sep="")
}
titles
data <- df[df[,1]==i,]
data
range_x <- diff(range(df$predicted))
min_axis_x <- min(df$predicted)
max_axis_x <- max(df$predicted)
range_y <- diff(range(df$distance))
min_axis_y <- min(df$distance) - range_y*0.1
max_axis_y <- max(df$distance) + range_y*0.1
##### Linear regression (x: predicted, y: distance) #####
#model <- stats::lm(data$distance ~ data$predicted)
model <- RobustLinearReg::siegel_regression(distance ~ predicted, data = data)
newx = seq(min(data$predicted), max(data$predicted), by = 0.1)
suppressWarnings(conf_interval <- stats::predict(model, newdata=data.frame(x=newx), interval="confidence", level = 0.95))
newx
model
stats::predict(model, newdata=data.frame(x=newx), interval="confidence", level = 0.95)
data
data.frame(x=newx)
stats::predict(model, newdata=data.frame(x=newx)
)
help(predict)
suppressWarnings(conf_interval <- stats::predict(model, interval="confidence", level = 0.95))
conf_interval
conf_interval2 <- as.data.frame(cbind(data$predicted, conf_interval)[order(data$predicted, decreasing = F),])
conf_interval2
names(conf_interval2)[1] <- "predicted"
## Plotting
r2 <- format(summary(model)$r.squared, digits=2, nsmall = 2)
r2lab <- bquote(paste(italic(R^2), " = ", .(r2), sep=""))
intercept <- format(summary(model)$coefficients[1,1], digits=2, nsmall = 2)
coefficient <- format(summary(model)$coefficients[2,1], digits=2, nsmall = 2)
equationlab <- bquote(paste(italic(y), " = ", .(intercept), " + ", .(coefficient), " ", italic(x), sep=""))
equationlab
if(as.numeric(coefficient) < 0){
coefficient <- format(-summary(model)$coefficients[2,1], digits=2, nsmall = 2)
equationlab <- bquote(paste(italic(y), " = ", .(intercept), " - ", .(coefficient), " ", italic(x), sep=""))
}
coefficient
equationlab
as.numeric(coefficient)
conf_interval2
ggplot() +
geom_line(data = conf_interval2, aes(x=predicted, y=fit), color = "steelblue", linewidth = 1) +
geom_ribbon(data = conf_interval2, aes(x=predicted, ymin = lwr, ymax = upr), alpha = 0.4, fill = "steelblue")
ggplot() +
geom_line(data = conf_interval2, aes(x=predicted, y=fit), color = "steelblue", linewidth = 1) +
geom_ribbon(data = conf_interval2, aes(x=predicted, ymin = lwr, ymax = upr), alpha = 0.4, fill = "steelblue") +
geom_point(data = data, aes(x=predicted, y=distance), size=0.8, alpha=0.5)
ggplot() +
geom_line(data = conf_interval2, aes(x=predicted, y=fit), color = "steelblue", linewidth = 1) +
geom_ribbon(data = conf_interval2, aes(x=predicted, ymin = lwr, ymax = upr), alpha = 0.4, fill = "steelblue") +
geom_point(data = data, aes(x=predicted, y=distance), size=0.8, alpha=0.5) +
annotate("text", x=min_axis_x+range_x*0.02, y=max_axis_y-range_y*0.05,
label=equationlab, size=ps/ggplot2::.pt, hjust = 0) +
annotate("text", x=min_axis_x+range_x*0.02, y=max_axis_y-range_y*0.17,
label=r2lab, size=ps/ggplot2::.pt, hjust = 0) +
coord_cartesian(xlim=c(min_axis_x, max_axis_x), ylim=c(min_axis_y, max_axis_y), clip='on') +
theme_plot2 +
theme(plot.title = element_text(size=ps, face = "bold"),
axis.title=element_text(size=ps),
axis.text=element_text(size=ps),
plot.tag = element_text(size = 12, face = "bold"),
plot.margin=unit(c(3,3,3,3), 'mm')) +
labs(title = titles,
x=label_x,
y = label_y)
## Plotting for each cell
glist <- list()
for(i in 1:length(cell_list)){
# Title of the plots
if(length(cell_list) == 1){
titles <- NULL
}else{
titles <- paste(stringr::str_to_title(df_name), " ", i, sep="")
}
data <- df[df[,1]==i,]
range_x <- diff(range(df$predicted))
min_axis_x <- min(df$predicted)
max_axis_x <- max(df$predicted)
range_y <- diff(range(df$distance))
min_axis_y <- min(df$distance) - range_y*0.1
max_axis_y <- max(df$distance) + range_y*0.1
##### Linear regression (x: predicted, y: distance) #####
#model <- stats::lm(data$distance ~ data$predicted)
model <- RobustLinearReg::siegel_regression(distance ~ predicted, data = data)
newx = seq(min(data$predicted), max(data$predicted), by = 0.1)
suppressWarnings(conf_interval <- stats::predict(model, interval="confidence", level = 0.95))
conf_interval2 <- as.data.frame(cbind(data$predicted, conf_interval)[order(data$predicted, decreasing = F),])
names(conf_interval2)[1] <- "predicted"
## Plotting
r2 <- format(summary(model)$r.squared, digits=2, nsmall = 2)
r2lab <- bquote(paste(italic(R^2), " = ", .(r2), sep=""))
intercept <- format(summary(model)$coefficients[1,1], digits=2, nsmall = 2)
coefficient <- format(summary(model)$coefficients[2,1], digits=2, nsmall = 2)
equationlab <- bquote(paste(italic(y), " = ", .(intercept), " + ", .(coefficient), " ", italic(x), sep=""))
if(as.numeric(coefficient) < 0){
coefficient <- format(-summary(model)$coefficients[2,1], digits=2, nsmall = 2)
equationlab <- bquote(paste(italic(y), " = ", .(intercept), " - ", .(coefficient), " ", italic(x), sep=""))
}
glist[[i]] <- ggplot() +
geom_line(data = conf_interval2, aes(x=predicted, y=fit), color = "steelblue", linewidth = 1) +
geom_ribbon(data = conf_interval2, aes(x=predicted, ymin = lwr, ymax = upr), alpha = 0.4, fill = "steelblue") +
geom_point(data = data, aes(x=predicted, y=distance), size=0.8, alpha=0.5) +
annotate("text", x=min_axis_x+range_x*0.02, y=max_axis_y-range_y*0.05,
label=equationlab, size=ps/ggplot2::.pt, hjust = 0) +
annotate("text", x=min_axis_x+range_x*0.02, y=max_axis_y-range_y*0.17,
label=r2lab, size=ps/ggplot2::.pt, hjust = 0) +
coord_cartesian(xlim=c(min_axis_x, max_axis_x), ylim=c(min_axis_y, max_axis_y), clip='on') +
theme_plot2 +
theme(plot.title = element_text(size=ps, face = "bold"),
axis.title=element_text(size=ps),
axis.text=element_text(size=ps),
plot.tag = element_text(size = 12, face = "bold"),
plot.margin=unit(c(3,3,3,3), 'mm')) +
labs(title = titles,
x=label_x,
y = label_y)
}
## Plotting for all cells
# Title of the plots
if(length(cell_list) != 1){
titles <- paste0("All ", stringr::str_to_lower(df_name), "s")
data <- df
range_x <- diff(range(df$predicted))
min_axis_x <- min(df$predicted)
max_axis_x <- max(df$predicted)
range_y <- diff(range(df$distance))
min_axis_y <- min(df$distance) - range_y*0.1
max_axis_y <- max(df$distance) + range_y*0.1
model <- stats::lm(data$distance ~ data$predicted)
r2 <- format(summary(model)$r.squared, digits=2, nsmall = 2)
r2lab <- bquote(paste(italic(R^2), " = ", .(r2), sep=""))
intercept <- format(summary(model)$coefficients[1,1], digits=2, nsmall = 2)
coefficient <- format(summary(model)$coefficients[2,1], digits=2, nsmall = 2)
equationlab <- bquote(paste(italic(y), " = ", .(intercept), " + ", .(coefficient), " ", italic(x), sep=""))
if(as.numeric(coefficient) < 0){
coefficient <- format(-summary(model)$coefficients[2,1], digits=2, nsmall = 2)
equationlab <- bquote(paste(italic(y), " = ", .(intercept), " - ", .(coefficient), " ", italic(x), sep=""))
}
glist[[length(cell_list) + 1]] <- ggplot(data, aes(x=predicted, y=distance)) +
geom_smooth(method="lm", color = "steelblue", fill = "steelblue") +
geom_point(size=0.8, alpha=0.5) +
annotate("text", x=min_axis_x+range_x*0.02, y=max_axis_y-range_y*0.05,
label=equationlab, size=ps/ggplot2::.pt, hjust = 0) +
annotate("text", x=min_axis_x+range_x*0.02, y=max_axis_y-range_y*0.17,
label=r2lab, size=ps/ggplot2::.pt, hjust = 0) +
coord_cartesian(xlim=c(min_axis_x, max_axis_x), ylim=c(min_axis_y, max_axis_y), clip='on') +
theme_plot2 +
theme(plot.title = element_text(size=ps, face = "bold"),
axis.title=element_text(size=ps),
axis.text=element_text(size=ps),
plot.tag = element_text(size = 12, face = "bold"),
plot.margin=unit(c(3,3,3,3), 'mm')) +
labs(title = titles,
x=label_x,
y = label_y)
}
length(cell_list) != 1
## Plotting for all cells
# Title of the plots
if(length(cell_list) != 1){
titles <- paste0("All ", stringr::str_to_lower(df_name), "s")
data <- df
range_x <- diff(range(df$predicted))
min_axis_x <- min(df$predicted)
max_axis_x <- max(df$predicted)
range_y <- diff(range(df$distance))
min_axis_y <- min(df$distance) - range_y*0.1
max_axis_y <- max(df$distance) + range_y*0.1
#model <- stats::lm(data$distance ~ data$predicted)
model <- RobustLinearReg::siegel_regression(distance ~ predicted, data = data)
newx = seq(min(data$predicted), max(data$predicted), by = 0.1)
suppressWarnings(conf_interval <- stats::predict(model, interval="confidence", level = 0.95))
conf_interval2 <- as.data.frame(cbind(data$predicted, conf_interval)[order(data$predicted, decreasing = F),])
names(conf_interval2)[1] <- "predicted"
## Plotting
r2 <- format(summary(model)$r.squared, digits=2, nsmall = 2)
r2lab <- bquote(paste(italic(R^2), " = ", .(r2), sep=""))
intercept <- format(summary(model)$coefficients[1,1], digits=2, nsmall = 2)
coefficient <- format(summary(model)$coefficients[2,1], digits=2, nsmall = 2)
equationlab <- bquote(paste(italic(y), " = ", .(intercept), " + ", .(coefficient), " ", italic(x), sep=""))
if(as.numeric(coefficient) < 0){
coefficient <- format(-summary(model)$coefficients[2,1], digits=2, nsmall = 2)
equationlab <- bquote(paste(italic(y), " = ", .(intercept), " - ", .(coefficient), " ", italic(x), sep=""))
}
glist[[length(cell_list) + 1]] <- ggplot() +
geom_line(data = conf_interval2, aes(x=predicted, y=fit), color = "steelblue", linewidth = 1) +
geom_ribbon(data = conf_interval2, aes(x=predicted, ymin = lwr, ymax = upr), alpha = 0.4, fill = "steelblue") +
geom_point(data = data, aes(x=predicted, y=distance), size=0.8, alpha=0.5) +
annotate("text", x=min_axis_x+range_x*0.02, y=max_axis_y-range_y*0.05,
label=equationlab, size=ps/ggplot2::.pt, hjust = 0) +
annotate("text", x=min_axis_x+range_x*0.02, y=max_axis_y-range_y*0.17,
label=r2lab, size=ps/ggplot2::.pt, hjust = 0) +
coord_cartesian(xlim=c(min_axis_x, max_axis_x), ylim=c(min_axis_y, max_axis_y), clip='on') +
theme_plot2 +
theme(plot.title = element_text(size=ps, face = "bold"),
axis.title=element_text(size=ps),
axis.text=element_text(size=ps),
plot.tag = element_text(size = 12, face = "bold"),
plot.margin=unit(c(3,3,3,3), 'mm')) +
labs(title = titles,
x=label_x,
y = label_y)
}
if(length(cell_list) != 1){
# Speed of all cells
lm_allcells <- RobustLinearReg::siegel_regression(distance ~ predicted, data = df)
# Speed of each cell
ydiff <- 1 / (length(cell_list) + 1)
g_speed <- ggplot() + theme_void()
for(i in 1:length(cell_list)){
lm_cell <- RobustLinearReg::siegel_regression(formula = distance~predicted, data = df[df[,1]==i,])
# label
title_all <- paste0("All ", stringr::str_to_lower(df_name), "s")
title_each <- paste(stringr::str_to_title(df_name), " ", i, sep="")
if(unit1=="meter"){
label_all <- bquote(paste(.(title_all), ":  ", .(round(lm_allcells$coefficients[2], 2)), " ", (m/.(unit2)), sep = ""))
label_each <- bquote(paste(.(title_each), ":  ", .(round(lm_cell$coefficients[2], 2)), " ", (m/.(unit2)), sep = ""))
}else if(unit1=="centimeter"){
label_all <- bquote(paste(.(title_all), ":  ", .(round(lm_allcells$coefficients[2], 2)), " ", (cm/.(unit2)), sep = ""))
label_each <- bquote(paste(.(title_each), ":  ", .(round(lm_cell$coefficients[2], 2)), " ", (cm/.(unit2)), sep = ""))
}else if(unit1=="millimeter"){
label_all <- bquote(paste(.(title_all), ":  ", .(round(lm_allcells$coefficients[2], 2)), " ", (mm/.(unit2)), sep = ""))
label_each <- bquote(paste(.(title_each), ":  ", .(round(lm_cell$coefficients[2], 2)), " ", (mm/.(unit2)), sep = ""))
}else if(unit1=="micrometer"){
label_all <- bquote(paste(.(title_all), ":  ", .(round(lm_allcells$coefficients[2], 2)), " ", (mu*m/.(unit2)), sep = ""))
label_each <- bquote(paste(.(title_each), ":  ", .(round(lm_cell$coefficients[2], 2)), " ", (mu*m/.(unit2)), sep = ""))
}else if(unit1=="nanometer"){
label_all <- bquote(paste(.(title_all), ":  ", .(round(lm_allcells$coefficients[2], 2)), " ", (nm/.(unit2)), sep = ""))
label_each <- bquote(paste(.(title_each), ":  ", .(round(lm_cell$coefficients[2], 2)), " ", (nm/.(unit2)), sep = ""))
}else{
label_all <- bquote(paste(.(title_all), ":  ", .(round(lm_allcells$coefficients[2], 2)), " ", (.(unit1)/.(unit2)), sep = ""))
label_each <- bquote(paste(.(title_each), ":  ", .(round(lm_cell$coefficients[2], 2)), " ", (.(unit1)/.(unit2)), sep = ""))
}
g_speed <- g_speed +
annotate("text", x = 0.5, y = 1 - ydiff*i,
label = label_each,
size = ps/ggplot2::.pt)
}
# Speed of all cells
g_speed <- g_speed +
coord_cartesian(xlim=c(0,1), ylim=c(0,1), clip='off') +
annotate("text", x=0.5, y=1.0,
label="Signal transfer speed",
size=ps/ggplot2::.pt, fontface = 2) +
annotate("text", x=0.5, y=0.0,
label = label_all,
size=ps/ggplot2::.pt)
glist[[length(cell_list) + 2]] <- g_speed
}else{
g_speed <- ggplot() + theme_void()
lm_cell <- RobustLinearReg::siegel_regression(formula = distance~predicted, data = df)
if(unit1=="meter"){
label_each <- bquote(paste(.(round(lm_cell$coefficients[2], 2)), " ", (m/.(unit2)), sep = ""))
}else if(unit1=="centimeter"){
label_each <- bquote(paste(.(round(lm_cell$coefficients[2], 2)), " ", (cm/.(unit2)), sep = ""))
}else if(unit1=="millimeter"){
label_each <- bquote(paste(.(round(lm_cell$coefficients[2], 2)), " ", (mm/.(unit2)), sep = ""))
}else if(unit1=="micrometer"){
label_each <- bquote(paste(.(round(lm_cell$coefficients[2], 2)), " ", (mu*m/.(unit2)), sep = ""))
}else if(unit1=="nanometer"){
label_each <- bquote(paste(.(round(lm_cell$coefficients[2], 2)), " ", (nm/.(unit2)), sep = ""))
}else{
label_each <- bquote(paste(.(round(lm_cell$coefficients[2], 2)), " ", (.(unit1)/.(unit2)), sep = ""))
}
g_speed <- g_speed +
annotate("text", x = 0.5, y = 0.7,
label = label_each,
size = ps/ggplot2::.pt)
g_speed <- g_speed +
coord_cartesian(xlim=c(0,1), ylim=c(0,1), clip='off') +
annotate("text", x=0.5, y=1.0,
label="Signal transfer speed",
size=ps/ggplot2::.pt, fontface = 2)
glist[[length(cell_list) + 1]] <- g_speed
}
glist[[1]]
glist[[2]]
glist[[3]]
glist[[4]]
glist[[5]]
### Test the package
devtools::document()
install.packages("../cellssm", repos = NULL, type = "source")
# Load packages
library(cellssm)
# Create an output directory
out <- "07_lm_signal"
if(file.exists(out)==F){
dir.create(out, recursive=T)
}
# Linear regression
glist <- lm_signal(cell_list = cell_list, mvtime = mvtime,
ex_name = "microbeam", unit1 = "micrometer", unit2 = "min")
# Save output
g <- glist[[1]] + glist[[2]] + glist[[3]] + glist[[4]] + glist[[5]] + glist[[6]] +
plot_layout(ncol = 3)
suppressWarnings(ggsave(paste0(out, "/individual_chloroplast_lm_signal.pdf"),
g, height = 110, width = 50*3, units = "mm"))
### Test the package
devtools::document()
install.packages("../cellssm", repos = NULL, type = "source")
# Load packages
library(cellssm)
# Create an output directory
out <- "06_lm_dist_start"
if(file.exists(out)==F){
dir.create(out, recursive=T)
}
# dist vs. start
glist <- lm_dist_start(cell_list = cell_list, mvtime = mvtime,
ex_name = "microbeam", unit1 = "micrometer", unit2 = "min")
# Save output
g <- glist[[1]] + glist[[2]] + glist[[3]] + glist[[4]] + glist[[5]] +
patchwork::plot_layout(ncol = 3)
ggsave(paste0(out, "/individual_chloroplast_lm_dist_start.pdf"),
g, height = 110, width = 50*3, units = "mm")
# Load packages
library(cellssm)
# Create an output directory
out <- "07_lm_signal"
if(file.exists(out)==F){
dir.create(out, recursive=T)
}
# Linear regression
glist <- lm_signal(cell_list = cell_list, mvtime = mvtime,
ex_name = "microbeam", unit1 = "micrometer", unit2 = "min")
# Save output
g <- glist[[1]] + glist[[2]] + glist[[3]] + glist[[4]] + glist[[5]] + glist[[6]] +
plot_layout(ncol = 3)
suppressWarnings(ggsave(paste0(out, "/individual_chloroplast_lm_signal.pdf"),
g, height = 110, width = 50*3, units = "mm"))
# Create an output directory
out <- "05_lm_dist_beta"
if(file.exists(out)==F){
dir.create(out, recursive=T)
}
## Bayes
# Load data of chloroplast movements
mvtime <- as.data.frame(data.table::fread(
"02_ssm_individual/csv/ssm_individual_chloroplast_mvtime.csv"))
# Linear regression
glist <- lm_dist_beta(cell_list = cell_list, mvtime = mvtime,
ssm_path = "02_ssm_individual",
ssm_method = "Bayes", res_name = "chloroplast",
ex_name = "microbeam", unit1 = "micrometer", unit2 = "min")
# Save output
g <- (glist[[1]] + labs(tag = "A")) + (glist[[2]] + labs(tag = "B")) +
(glist[[3]] + labs(tag = "C")) + (glist[[4]] + labs(tag = "D")) +
(glist[[5]] + labs(tag = "E")) +
patchwork::plot_layout(nrow = 2)
suppressWarnings(ggsave(paste0(out, "/individual_chloroplast_lm_dist_beta.pdf"),
g, height = 104, width = 168, units = "mm"))
### Test the package
devtools::document()
### Test the package
devtools::document()
devtools::build_manual()
usethis::use_testthat()
devtools::check()
### Test the package
devtools::document()
devtools::check()
#install.packages("devtools")
devtools::install_github("hnishio/cellssm")
### Test the package
devtools::document()
devtools::check()
#install.packages("devtools")
devtools::install_github("hnishio/cellssm")
### Test the package
devtools::document()
devtools::check()
install.packages("../cellssm", repos = NULL, type = "source")
# Load packages
library(cellssm)
# Set the path to which CmdStan was installed
cmdstanr::set_cmdstan_path("~/cmdstan/")
# Load data
data("cell1", "cell2", "cell3", "cell4", "visual")
cell_list <- list(cell1, cell2, cell3, cell4)
test<-list(cell2[,c(1,2,4)])
ssm_individual(cell_list = test, out = "02_ssm_individual_test",
res_name = "chloroplast", ex_name = "microbeam",
unit1 = "micrometer", unit2 = "min",
df_idx = c(2), res_idx = c(2), stepwise = F)
ssm_individual(cell_list = test, out = "02_ssm_individual_test",
res_name = "chloroplast", ex_name = "microbeam",
unit1 = "micrometer", unit2 = "min",
df_idx = c(2), res_idx = c(2), stepwise = T)
# Run once to configure package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
usethis::use_pkgdown_github_pages()
### Test the package
devtools::document()
devtools::check()
