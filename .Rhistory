}
# Modify data_list
data_list <- c(data_list, list(boundary1=boundary1, boundary2=boundary2))
# Execute MCMC
fit <- model$sample(
data = data_list,
seed = 1,
iter_warmup = warmup*thin,
iter_sampling = sampling*thin,
chains = 4,
parallel_chains = 4,
refresh = floor(warmup/2.5*thin),
#show_messages = F,
#sig_figs = 4,
output_dir = "/tmp",
output_basename = paste0("cell", i, "_", res_name, j),
adapt_delta = 0.95,
thin = thin
)
# 99% Bayesian credible intervals
outcsv_name <- list.files("/tmp")
outcsv_name <- outcsv_name[grep(paste0("cell", i, "_", res_name, j, "-"), outcsv_name)]
tmp_csv_w <- NULL
tmp_csv_b_ex <- NULL
tmp_csv_alpha <- NULL
tmp_csv_s_w <- NULL
tmp_csv_s_b_ex <- NULL
tmp_csv_s_Y <- NULL
for(k in 1:length(outcsv_name)){
tmp_csv <- as.data.frame(data.table::fread(cmd = paste0("grep -v '^#' ", "/tmp/", outcsv_name[k])))
tmp_csv_w <- rbind(tmp_csv_w, tmp_csv[,stringr::str_starts(names(tmp_csv), "w")])
tmp_csv_b_ex <- rbind(tmp_csv_b_ex, tmp_csv[,stringr::str_starts(names(tmp_csv), "b_ex")])
tmp_csv_alpha <- rbind(tmp_csv_alpha, tmp_csv[,stringr::str_starts(names(tmp_csv), "alpha")])
tmp_csv_s_w <- c(tmp_csv_s_w, tmp_csv[,stringr::str_starts(names(tmp_csv), "s_w")])
tmp_csv_s_b_ex <- c(tmp_csv_s_b_ex, tmp_csv[,stringr::str_starts(names(tmp_csv), "s_b_ex")])
tmp_csv_s_Y <- c(tmp_csv_s_Y, tmp_csv[,stringr::str_starts(names(tmp_csv), "s_Y")])
}
df_w <- as.data.frame(t(apply(tmp_csv_w, 2, quantile99)))
df_b_ex <- as.data.frame(t(apply(tmp_csv_b_ex, 2, quantile99)))
df_alpha <- as.data.frame(t(apply(tmp_csv_alpha, 2, quantile99)))
df_s <- t(data.frame(s_w = quantile99(tmp_csv_s_w),
s_b_ex = quantile99(tmp_csv_s_b_ex),
s_Y = quantile99(tmp_csv_s_Y)))
df_s <- cbind(data.frame(s_name = row.names(df_s)), df_s)
# Save output
colnames(df_w) <- paste0("w_", colnames(df_w))
colnames(df_b_ex) <- paste0("b_ex_", colnames(df_b_ex))
colnames(df_alpha) <- paste0("alpha_", colnames(df_alpha))
df <- cbind(data.frame(time = cell_list[[i]]$time[-1],
ex = cell_list[[i]]$ex[-1],
Y = diff(cell_list[[i]][,j+2])),
df_w, df_alpha,
as.data.frame(rbind(matrix(NA, nrow = data_list$boundary1, ncol = 21), as.matrix(df_b_ex), matrix(NA, nrow = data_list$N - data_list$boundary2 + 1, ncol = 21))))
## Movement time
ex_period <- max(cell_list[[i]]$time[cell_list[[i]]$ex == 1], na.rm = T) - min(cell_list[[i]]$time[cell_list[[i]]$ex == 1], na.rm = T) + 1
ex_period
ex_period/start_sensitivity
90/5
if(ex_sign == "positive"){  # ex_sign == "positive"
if(length(which(df$`b_ex_2.5%` > 0)) > 0){
start_time <- df$time[which(df$`b_ex_2.5%` > 0)][1]
end_time <- df$time[which(df$`b_ex_2.5%` > 0)][length(which(df$`b_ex_2.5%` > 0))] + 1
move_time <- end_time - start_time
if((start_time - df$time[which(df$`b_ex_5%` > 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_5%` > 0)][1]
end_time <- df$time[which(df$`b_ex_5%` > 0)][length(which(df$`b_ex_5%` > 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_10%` > 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_10%` > 0)][1]
end_time <- df$time[which(df$`b_ex_10%` > 0)][length(which(df$`b_ex_10%` > 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_15%` > 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_15%` > 0)][1]
end_time <- df$time[which(df$`b_ex_15%` > 0)][length(which(df$`b_ex_15%` > 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_20%` > 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_20%` > 0)][1]
end_time <- df$time[which(df$`b_ex_20%` > 0)][length(which(df$`b_ex_20%` > 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_25%` > 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_25%` > 0)][1]
end_time <- df$time[which(df$`b_ex_25%` > 0)][length(which(df$`b_ex_25%` > 0))] + 1
move_time <- end_time - start_time
}
}else if(length(which(df$`b_ex_5%` > 0)) > 0){
start_time <- df$time[which(df$`b_ex_5%` > 0)][1]
end_time <- df$time[which(df$`b_ex_5%` > 0)][length(which(df$`b_ex_5%` > 0))] + 1
move_time <- end_time - start_time
if((start_time - df$time[which(df$`b_ex_10%` > 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_10%` > 0)][1]
end_time <- df$time[which(df$`b_ex_10%` > 0)][length(which(df$`b_ex_10%` > 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_15%` > 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_15%` > 0)][1]
end_time <- df$time[which(df$`b_ex_15%` > 0)][length(which(df$`b_ex_15%` > 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_20%` > 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_20%` > 0)][1]
end_time <- df$time[which(df$`b_ex_20%` > 0)][length(which(df$`b_ex_20%` > 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_25%` > 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_25%` > 0)][1]
end_time <- df$time[which(df$`b_ex_25%` > 0)][length(which(df$`b_ex_25%` > 0))] + 1
move_time <- end_time - start_time
}
}else if(length(which(df$`b_ex_10%` > 0)) > 0){
start_time <- df$time[which(df$`b_ex_10%` > 0)][1]
end_time <- df$time[which(df$`b_ex_10%` > 0)][length(which(df$`b_ex_10%` > 0))] + 1
move_time <- end_time - start_time
if((start_time - df$time[which(df$`b_ex_15%` > 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_15%` > 0)][1]
end_time <- df$time[which(df$`b_ex_15%` > 0)][length(which(df$`b_ex_15%` > 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_20%` > 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_20%` > 0)][1]
end_time <- df$time[which(df$`b_ex_20%` > 0)][length(which(df$`b_ex_20%` > 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_25%` > 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_25%` > 0)][1]
end_time <- df$time[which(df$`b_ex_25%` > 0)][length(which(df$`b_ex_25%` > 0))] + 1
move_time <- end_time - start_time
}
}else if(length(which(df$`b_ex_15%` > 0)) > 0){
start_time <- df$time[which(df$`b_ex_15%` > 0)][1]
end_time <- df$time[which(df$`b_ex_15%` > 0)][length(which(df$`b_ex_15%` > 0))] + 1
move_time <- end_time - start_time
if((start_time - df$time[which(df$`b_ex_20%` > 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_20%` > 0)][1]
end_time <- df$time[which(df$`b_ex_20%` > 0)][length(which(df$`b_ex_20%` > 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_25%` > 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_25%` > 0)][1]
end_time <- df$time[which(df$`b_ex_25%` > 0)][length(which(df$`b_ex_25%` > 0))] + 1
move_time <- end_time - start_time
}
}else if(length(which(df$`b_ex_20%` > 0)) > 0){
start_time <- df$time[which(df$`b_ex_20%` > 0)][1]
end_time <- df$time[which(df$`b_ex_20%` > 0)][length(which(df$`b_ex_20%` > 0))] + 1
move_time <- end_time - start_time
if((start_time - df$time[which(df$`b_ex_25%` > 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_25%` > 0)][1]
end_time <- df$time[which(df$`b_ex_25%` > 0)][length(which(df$`b_ex_25%` > 0))] + 1
move_time <- end_time - start_time
}
}else if(length(which(df$`b_ex_25%` > 0)) > 0){
start_time <- df$time[which(df$`b_ex_25%` > 0)][1]
end_time <- df$time[which(df$`b_ex_25%` > 0)][length(which(df$`b_ex_25%` > 0))] + 1
move_time <- end_time - start_time
}else{
start_time <- Inf
end_time <- Inf
move_time <- Inf
}
}else{  # ex_sign == "negative"
if(length(which(df$`b_ex_97.5%` < 0)) > 0){
start_time <- df$time[which(df$`b_ex_97.5%` < 0)][1]
end_time <- df$time[which(df$`b_ex_97.5%` < 0)][length(which(df$`b_ex_97.5%` < 0))] + 1
move_time <- end_time - start_time
if((start_time - df$time[which(df$`b_ex_95%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_95%` < 0)][1]
end_time <- df$time[which(df$`b_ex_95%` < 0)][length(which(df$`b_ex_95%` < 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_90%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_90%` < 0)][1]
end_time <- df$time[which(df$`b_ex_90%` < 0)][length(which(df$`b_ex_90%` < 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_85%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_85%` < 0)][1]
end_time <- df$time[which(df$`b_ex_85%` < 0)][length(which(df$`b_ex_85%` < 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_80%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_80%` < 0)][1]
end_time <- df$time[which(df$`b_ex_80%` < 0)][length(which(df$`b_ex_80%` < 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_75%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_75%` < 0)][1]
end_time <- df$time[which(df$`b_ex_75%` < 0)][length(which(df$`b_ex_75%` < 0))] + 1
move_time <- end_time - start_time
}
}else if(length(which(df$`b_ex_95%` < 0)) > 0){
start_time <- df$time[which(df$`b_ex_95%` < 0)][1]
end_time <- df$time[which(df$`b_ex_95%` < 0)][length(which(df$`b_ex_95%` < 0))] + 1
move_time <- end_time - start_time
if((start_time - df$time[which(df$`b_ex_90%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_90%` < 0)][1]
end_time <- df$time[which(df$`b_ex_90%` < 0)][length(which(df$`b_ex_90%` < 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_85%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_85%` < 0)][1]
end_time <- df$time[which(df$`b_ex_85%` < 0)][length(which(df$`b_ex_85%` < 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_80%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_80%` < 0)][1]
end_time <- df$time[which(df$`b_ex_80%` < 0)][length(which(df$`b_ex_80%` < 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_75%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_75%` < 0)][1]
end_time <- df$time[which(df$`b_ex_75%` < 0)][length(which(df$`b_ex_75%` < 0))] + 1
move_time <- end_time - start_time
}
}else if(length(which(df$`b_ex_90%` < 0)) > 0){
start_time <- df$time[which(df$`b_ex_90%` < 0)][1]
end_time <- df$time[which(df$`b_ex_90%` < 0)][length(which(df$`b_ex_90%` < 0))] + 1
move_time <- end_time - start_time
if((start_time - df$time[which(df$`b_ex_85%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_85%` < 0)][1]
end_time <- df$time[which(df$`b_ex_85%` < 0)][length(which(df$`b_ex_85%` < 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_80%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_80%` < 0)][1]
end_time <- df$time[which(df$`b_ex_80%` < 0)][length(which(df$`b_ex_80%` < 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_75%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_75%` < 0)][1]
end_time <- df$time[which(df$`b_ex_75%` < 0)][length(which(df$`b_ex_75%` < 0))] + 1
move_time <- end_time - start_time
}
}else if(length(which(df$`b_ex_85%` < 0)) > 0){
start_time <- df$time[which(df$`b_ex_85%` < 0)][1]
end_time <- df$time[which(df$`b_ex_85%` < 0)][length(which(df$`b_ex_85%` < 0))] + 1
move_time <- end_time - start_time
if((start_time - df$time[which(df$`b_ex_80%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_80%` < 0)][1]
end_time <- df$time[which(df$`b_ex_80%` < 0)][length(which(df$`b_ex_80%` < 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_75%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_75%` < 0)][1]
end_time <- df$time[which(df$`b_ex_75%` < 0)][length(which(df$`b_ex_75%` < 0))] + 1
move_time <- end_time - start_time
}
}else if(length(which(df$`b_ex_80%` < 0)) > 0){
start_time <- df$time[which(df$`b_ex_80%` < 0)][1]
end_time <- df$time[which(df$`b_ex_80%` < 0)][length(which(df$`b_ex_80%` < 0))] + 1
move_time <- end_time - start_time
if((start_time - df$time[which(df$`b_ex_75%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_75%` < 0)][1]
end_time <- df$time[which(df$`b_ex_75%` < 0)][length(which(df$`b_ex_75%` < 0))] + 1
move_time <- end_time - start_time
}
}else if(length(which(df$`b_ex_75%` < 0)) > 0){
start_time <- df$time[which(df$`b_ex_75%` < 0)][1]
end_time <- df$time[which(df$`b_ex_75%` < 0)][length(which(df$`b_ex_75%` < 0))] + 1
move_time <- end_time - start_time
}else{
start_time <- Inf
end_time <- Inf
move_time <- Inf
}
}
mv_time <- data.frame(start_time = start_time, end_time = end_time, move_time = move_time)
mv_time
### Install the package
devtools::document()
devtools::check()
devtools::check()
data("cell1", "cell2", "cell3", "cell4", "chloroplast_mvtime")
cell_list <- list(cell1, cell2, cell3, cell4)
# Example of output of ssm_individual
data("cell1", "cell2", "cell3", "cell4", "chloroplast_mvtime")
cell_list <- list(cell1, cell2, cell3, cell4)
ssm_path = "02_ssm_individual"
for(i in 1:length(cell_list)){
for (j in 1:(ncol(cell_list[[i]])-2)){
outcsv_name <- list.files(paste0(ssm_path, "/csv"))
outcsv_name2 <- outcsv_name[grep(paste0(df_name, i, "_", res_name, j, "\\."), outcsv_name)]
outcsv_name3 <- outcsv_name[grep(paste0(df_name, i, "_", res_name, j, "_sd\\."), outcsv_name)]
eval(parse(text = paste0(
"df_", i, "_", j, "_chl <- as.data.frame(data.table::fread('", ssm_path,"/csv/", outcsv_name2, "'))
devtools::use_data(df_", i, "_", j, "_chl, internal = TRUE)"
)))
}
}
df_name = "cell"; res_name = "chloroplast"; ex_name = "microbeam"
for(i in 1:length(cell_list)){
for (j in 1:(ncol(cell_list[[i]])-2)){
outcsv_name <- list.files(paste0(ssm_path, "/csv"))
outcsv_name2 <- outcsv_name[grep(paste0(df_name, i, "_", res_name, j, "\\."), outcsv_name)]
outcsv_name3 <- outcsv_name[grep(paste0(df_name, i, "_", res_name, j, "_sd\\."), outcsv_name)]
eval(parse(text = paste0(
"df_", i, "_", j, "_chl <- as.data.frame(data.table::fread('", ssm_path,"/csv/", outcsv_name2, "'))
devtools::use_data(df_", i, "_", j, "_chl, internal = TRUE)"
)))
}
}
df_1_1_chl
devtools::use_data(df_1_1_chl, internal = TRUE)
help(use_data)
use_data(df_1_1_chl, internal = TRUE)
library(devtools)
use_data(df_1_1_chl, internal = TRUE)
for(i in 1:length(cell_list)){
for (j in 1:(ncol(cell_list[[i]])-2)){
outcsv_name <- list.files(paste0(ssm_path, "/csv"))
outcsv_name2 <- outcsv_name[grep(paste0(df_name, i, "_", res_name, j, "\\."), outcsv_name)]
outcsv_name3 <- outcsv_name[grep(paste0(df_name, i, "_", res_name, j, "_sd\\."), outcsv_name)]
eval(parse(text = paste0(
"df_", i, "_", j, "_chl <- as.data.frame(data.table::fread('", ssm_path,"/csv/", outcsv_name2, "'))
devtools::use_data(df_", i, "_", j, "_chl, internal = TRUE)"
)))
}
}
for(i in 1:length(cell_list)){
for (j in 1:(ncol(cell_list[[i]])-2)){
outcsv_name <- list.files(paste0(ssm_path, "/csv"))
outcsv_name2 <- outcsv_name[grep(paste0(df_name, i, "_", res_name, j, "\\."), outcsv_name)]
outcsv_name3 <- outcsv_name[grep(paste0(df_name, i, "_", res_name, j, "_sd\\."), outcsv_name)]
eval(parse(text = paste0(
"df_", i, "_", j, "_chl <- as.data.frame(data.table::fread('", ssm_path,"/csv/", outcsv_name2, "'))
use_data(df_", i, "_", j, "_chl, internal = TRUE)"
)))
}
}
i=1
j=2
outcsv_name <- list.files(paste0(ssm_path, "/csv"))
outcsv_name2 <- outcsv_name[grep(paste0(df_name, i, "_", res_name, j, "\\."), outcsv_name)]
outcsv_name3 <- outcsv_name[grep(paste0(df_name, i, "_", res_name, j, "_sd\\."), outcsv_name)]
eval(parse(text = paste0(
"df_", i, "_", j, "_chl <- as.data.frame(data.table::fread('", ssm_path,"/csv/", outcsv_name2, "'))
use_data(df_", i, "_", j, "_chl, internal = TRUE)"
)))
system.file("extdata", "ssm_individual_cell4_chloroplast1.csv", package = "cellssm")
install.packages("../cellssm", repos = NULL, type = "source")
library(cellssm)
### Install the package
devtools::document()
install.packages("../cellssm", repos = NULL, type = "source")
library(cellssm)
data("cell1", "cell2", "cell3", "cell4", "chloroplast_mvtime")
cell_list <- list(cell1, cell2, cell3, cell4)
system.file("extdata", "ssm_individual_cell4_chloroplast1.csv", package = "cellssm")
stringr::str_split(system.file("extdata", "ssm_individual_cell4_chloroplast1.csv", package = "cellssm"), "/)
stringr::str_split(system.file("extdata", "ssm_individual_cell4_chloroplast1.csv", package = "cellssm"), "/")
unlist(stringr::str_split(system.file("extdata", "ssm_individual_cell4_chloroplast1.csv", package = "cellssm"), "/"))
stringr::str_split(system.file("extdata", "ssm_individual_cell4_chloroplast1.csv", package = "cellssm"), "/")[[1]]
inp_dir <- stringr::str_split(system.file("extdata", "ssm_individual_cell4_chloroplast1.csv", package = "cellssm"), "/")[[1]]
inp_dir[length(inp_dir)]
inp_dir[-length(inp_dir)]
stringr::str_c(inp_dir[-length(inp_dir)], "/")
stringr::str_c(inp_dir[-length(inp_dir)], sep="/")
stringr::str_c(inp_dir[-length(inp_dir)], sep="/", collapse = NULL))
stringr::str_c(inp_dir[-length(inp_dir)], sep="/", collapse = NULL)
stringr::str_glue(inp_dir[-length(inp_dir)], sep="/")
paste(inp_dir[-length(inp_dir)], sep="/")
inp_dir[-length(inp_dir)]
paste(inp_dir[-length(inp_dir)], collapse = "/")
p
input_file <- stringr::str_split(system.file("extdata", "ssm_individual_cell4_chloroplast1.csv", package = "cellssm"), "/")[[1]]
input_dir <- paste(inp_file[-length(inp_file)], collapse = "/")
input_file <- stringr::str_split(system.file("extdata", "ssm_individual_cell4_chloroplast1.csv", package = "cellssm"), "/")[[1]]
input_dir <- paste(input_file[-length(input_file)], collapse = "/")
input_dir
glist <- lm_dist_beta(cell_list = cell_list, mvtime = chloroplast_mvtime,
ssm_path = input_dir,
ssm_method = "Bayes", res_name = "chloroplast",
ex_name = "microbeam", unit1 = "micrometer", unit2 = "min")
input_dir
### Install the package
devtools::document()
install.packages("../cellssm", repos = NULL, type = "source")
# Load packages
library(cellssm)
data("cell1", "cell2", "cell3", "cell4", "chloroplast_mvtime")
cell_list <- list(cell1, cell2, cell3, cell4)
input_file <- stringr::str_split(system.file("extdata", "ssm_individual_cell4_chloroplast1.csv", package = "cellssm"), "/")[[1]]
input_dir <- paste(input_file[-length(input_file)], collapse = "/")
input_dir
input_file <- stringr::str_split(system.file("extdata", "common_model_mvtimenull.stan", package = "cellssm"), "/")[[1]]
input_file
system.file("extdata", "common_model_mvtimenull.stan", package = "cellssm")
input_file <- stringr::str_split(system.file("extdata/csv", "ssm_individual_cell4_chloroplast1.csv", package = "cellssm"), "/")[[1]]
input_file
input_file <- stringr::str_split(system.file("extdata", "common_model_mvtimenull.stan", package = "cellssm"), "/")[[1]]
input_dir <- paste(input_file[-length(input_file)], collapse = "/")
input_dir
glist <- lm_dist_beta(cell_list = cell_list, mvtime = chloroplast_mvtime,
ssm_path = input_dir,
ssm_method = "Bayes", res_name = "chloroplast",
ex_name = "microbeam", unit1 = "micrometer", unit2 = "min")
glist[[1]]
ssm_file <- stringr::str_split(system.file("extdata", "individual_model.stan", package = "cellssm"), "/")[[1]]
ssm_path <- paste(ssm_file[-length(ssm_file)], collapse = "/")
ssm_path
glist <- lm_dist_beta(cell_list = cell_list, mvtime = chloroplast_mvtime,
ssm_path = ssm_path,
ssm_method = "Bayes", res_name = "chloroplast",
ex_name = "microbeam", unit1 = "micrometer", unit2 = "min")
# Load data
data("Paramecium", "Paramecium_mvtime")
cell_list <- list(Paramecium)
# Specify the path of the output directory of [ssm_individual] or [ssm_KFAS]
# below, the path of system files is specified to show an example
ssm_file <- stringr::str_split(system.file("extdata", "individual_model.stan", package = "cellssm"), "/")[[1]]
ssm_path <- paste(ssm_file[-length(ssm_file)], collapse = "/")
ssm_path
glist <- lm_dist_beta(cell_list = cell_list, mvtime = Paramecium_mvtime,
ssm_path = ssm_path, ex_sign = "positive",
ssm_method = "Bayes", df_name = "experiment",
res_name = "Paramecium", ex_name = "heat",
unit1 = "millimeter", unit2 = "sec")
### Install the package
devtools::document()
install.packages("../cellssm", repos = NULL, type = "source")
library(cellssm)
data("Paramecium", "Paramecium_mvtime")
cell_list <- list(Paramecium)
ssm_file <- stringr::str_split(system.file("extdata", "individual_model.stan", package = "cellssm"), "/")[[1]]
ssm_path <- paste(ssm_file[-length(ssm_file)], collapse = "/")
ssm_path
glist <- lm_dist_beta(cell_list = cell_list, mvtime = Paramecium_mvtime,
ssm_path = ssm_path, ex_sign = "positive",
ssm_method = "Bayes", df_name = "experiment",
res_name = "Paramecium", ex_name = "heat",
unit1 = "millimeter", unit2 = "sec")
glist[[1]]
glist[[2]]
glist[[3]]
glist[[4]]
glist[[5]]
### Install the package
devtools::document()
devtools::check()
### Install the package
devtools::document()
devtools::check()
help(suppressWarnings)
### Install the package
devtools::document()
### Install the package
devtools::document()
devtools::check()
### Install the package
devtools::document()
devtools::build_manual()
install.packages("../cellssm", repos = NULL, type = "source")
### .Rbuildignore
devtools::use_build_ignore("01_dist_vis", "02_ssm_individual")
### .Rbuildignore
library(devtools)
use_build_ignore("01_dist_vis", "02_ssm_individual")
help("use_build_ignore")
usethis::use_build_ignore("01_dist_vis", "02_ssm_individual")
usethis::use_build_ignore(c("01_dist_vis", "02_ssm_individual"))
### .Rbuildignore
usethis::use_build_ignore(c("01_dist_vis", "02_ssm_individual", "03_ssm_KFAS",
"04_nomodel", "05_lm_dist_beta", "06_lm_dist_start",
"07_lm_signal", "08_ssm_common",
"11_dist_vis", "12_ssm_individual", "13_ssm_KFAS",
"14_nomodel", "15_lm_dist_beta", "16_lm_dist_start",
"17_lm_signal", "18_ssm_common"))
### Install the package
devtools::document()
devtools::build_manual()
install.packages("../cellssm", repos = NULL, type = "source")
devtools::check()
### Install the package
devtools::document()
### Install the package
devtools::load_all()
help(ssm_individual)
### Install the package
devtools::document()
devtools::check()
### Install the package
devtools::document()
devtools::check()
# Binding variables locally to the function
fit <- lwr <- upr <-  NULL
lwr
fit
# Binding variables locally to the function
fit <- lwr <- upr <- mean_b <- most_b <- s_b_ex <- mean_alpha <- most_alpha <-
predicted <- ..rr.label.. <- NULL
..rr.label..
### Install the package
devtools::document()
devtools::check()
## Binding variables locally to the function
index <- time <- alpha_2.5% <- alpha_97.5% <- alpha_50% <- NULL
## Binding variables locally to the function
index <- time <- `alpha_2.5%` <- `alpha_97.5%` <- `alpha_50%` <- NULL
alpha_97.5%
`alpha_97.5%`
### Install the package
devtools::document()
devtools::check()
### Install the package
devtools::document()
devtools::check()
dectools::use_readme_rmd()
devtools::use_readme_rmd()
usethis::use_readme_rmd()
