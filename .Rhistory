data("cell1", "cell2", "cell3", "cell4", "visual")
cell_list <- list(cell1, cell2, cell3, cell4)
# When you want to compare the statistical and visual estimation of the start time
ssm_KFAS(cell_list = cell_list, visual = visual, out = "03_ssm_KFAS",
res_name = "chloroplast", ex_name = "microbeam",
unit1 = "micrometer", unit2 = "min")
# Test
test_that("length of the output is correct", {
expect_equal(length(list.files("03_ssm_KFAS/csv")), 52)
expect_equal(length(list.files("03_ssm_KFAS/pdf")), 50)
})
unlink("03_ssm_KFAS", recursive = T)
devtools::check()
help(KFAS)
help(ssm_KFAS)
## Binding variables locally to the function
predicted <- ..rr.label.. <- NULL
data("cell1", "cell2", "cell3", "cell4", "chloroplast_mvtime")
cell_list <- list(cell1, cell2, cell3, cell4)
## Adjust data.frame
if(ncol(mvtime) > 5){
df <- mvtime[,1:4]
names(df)[1:4] <- c("cell", "each", "visual", "predicted")
}else{
df <- mvtime[,1:3]
names(df)[1:3] <- c("cell", "each", "predicted")
}
mvtime = chloroplast_mvtime
ex_name = "microbeam"
unit1 = "micrometer"
unit2 = "min"
## Adjust data.frame
if(ncol(mvtime) > 5){
df <- mvtime[,1:4]
names(df)[1:4] <- c("cell", "each", "visual", "predicted")
}else{
df <- mvtime[,1:3]
names(df)[1:3] <- c("cell", "each", "predicted")
}
distance <- NULL
for(i in 1:length(cell_list)){
distance <- c(distance, as.numeric(cell_list[[i]][min(which(cell_list[[i]]$ex == 1))-1,-(1:2)]))
}
df$distance <- distance
df <- df[!is.infinite(rowSums(df)),]
## label
if(unit1=="meter"){
label_y <- bquote(paste("Distance from ", .(ex_name), " ", (m)))
label_x <- bquote(paste("Start time ", (.(unit2))))
}else if(unit1=="centimeter"){
label_y <- bquote(paste("Distance from ", .(ex_name), " ", (cm)))
label_x <- bquote(paste("Start time ", (.(unit2))))
}else if(unit1=="millimeter"){
label_y <- bquote(paste("Distance from ", .(ex_name), " ", (mm)))
label_x <- bquote(paste("Start time ", (.(unit2))))
}else if(unit1=="micrometer"){
label_y <- bquote(paste("Distance from ", .(ex_name), " ", (mu*m)))
label_x <- bquote(paste("Start time ", (.(unit2))))
}else if(unit1=="nanometer"){
label_y <- bquote(paste("Distance from ", .(ex_name), " ", (nm)))
label_x <- bquote(paste("Start time ", (.(unit2))))
}else{
label_y <- bquote(paste("Distance from ", .(ex_name), " (", .(unit1), ")"))
label_x <- bquote(paste("Start time ", (.(unit2))))
}
## Theme
if(theme_plot == "bw"){
theme_plot2 <- theme_bw(base_size = ps)
}else if(theme_plot == "light"){
theme_plot2 <- theme_light(base_size = ps)
}else if(theme_plot == "classic"){
theme_plot2 <- theme_classic(base_size = ps)
}else if(theme_plot == "gray"){
theme_plot2 <- theme_gray(base_size = ps)
}else if(theme_plot == "dark"){
theme_plot2 <- theme_dark(base_size = ps)
}else if(theme_plot == "test"){
theme_plot2 <- theme_test(base_size = ps)
}else if(theme_plot == "minimal"){
theme_plot2 <- theme_minimal(base_size = ps)
}else if(theme_plot == "void"){
theme_plot2 <- theme_void(base_size = ps)
}
df_name = "cell"
ps = 7
theme_plot = "bw"
## Theme
if(theme_plot == "bw"){
theme_plot2 <- theme_bw(base_size = ps)
}else if(theme_plot == "light"){
theme_plot2 <- theme_light(base_size = ps)
}else if(theme_plot == "classic"){
theme_plot2 <- theme_classic(base_size = ps)
}else if(theme_plot == "gray"){
theme_plot2 <- theme_gray(base_size = ps)
}else if(theme_plot == "dark"){
theme_plot2 <- theme_dark(base_size = ps)
}else if(theme_plot == "test"){
theme_plot2 <- theme_test(base_size = ps)
}else if(theme_plot == "minimal"){
theme_plot2 <- theme_minimal(base_size = ps)
}else if(theme_plot == "void"){
theme_plot2 <- theme_void(base_size = ps)
}
## Plotting for each cell
glist <- list()
i=1
# Title of the plots
if(length(cell_list) == 1){
titles <- NULL
}else{
titles <- paste(stringr::str_to_title(df_name), " ", i, sep="")
}
data <- df[df[,1]==i,]
data
range_x <- diff(range(df$predicted))
min_axis_x <- min(df$predicted)
max_axis_x <- max(df$predicted)
range_y <- diff(range(df$distance))
min_axis_y <- min(df$distance) - range_y*0.1
max_axis_y <- max(df$distance) + range_y*0.1
model <- stats::lm(distance ~ predicted, data = data)
seq(0.1, 0.9, by=1)
round((max(data$predicted) - min(data$predicted))/10
)
round((0.9 - 0.1)/10)
max(data$predicted) - min(data$predicted)
##### Linear regression (x: predicted, y: distance) #####
model <- stats::lm(distance ~ predicted, data = data)
newx = seq(min(data$predicted), max(data$predicted), by = 0.1)
suppressWarnings(conf_interval <- stats::predict(model, newdata=data.frame(x=newx), interval="confidence", level = 0.95))
newx
model
data.frame(x=newx)
stats::predict(model, newdata=data.frame(x=newx), interval="confidence", level = 0.95)
newx = seq(min(data$predicted), max(data$predicted), by = 1)
suppressWarnings(conf_interval <- stats::predict(model, newdata=data.frame(x=newx), interval="confidence", level = 0.95))
##### Linear regression (x: predicted, y: distance) #####
model <- stats::lm(distance ~ predicted, data = data)
model
newx = seq(min(data$predicted), max(data$predicted), by = 0.1)
newx
stats::predict(model, newdata=data.frame(x=newx), interval="confidence", level = 0.95)
data.frame(x=newx)
help(stats::predict)
help(predict)
r2 <- formatC(summary(model)$r.squared, digits=2)
2
r2
##### Linear regression (x: predicted, y: distance) #####
model <- stats::lm(distance ~ predicted, data = data)
newx = data.frame(x = seq(min(data$predicted), max(data$predicted), by = 0.1))
suppressWarnings(conf_interval <- stats::predict(model, newdata=newx, interval="confidence", level = 0.95))
newx
stats::predict(model, newdata=newx, interval="confidence", level = 0.95)
##### Linear regression (x: predicted, y: distance) #####
model <- stats::lm(distance ~ predicted, data = data)
newx = seq(min(data$predicted), max(data$predicted), by = 0.1)
suppressWarnings(conf_interval <- stats::predict(model, newdata=data.frame(x=newx), interval="confidence", level = 0.95))
##### Linear regression (x: predicted, y: distance) #####
model <- stats::lm(data$distance ~ data$predicted)
newx = seq(min(data$predicted), max(data$predicted), by = 0.1)
suppressWarnings(conf_interval <- stats::predict(model, newdata=data.frame(x=newx), interval="confidence", level = 0.95))
model
conf_interval2 <- as.data.frame(cbind(data$predicted, conf_interval)[order(data$predicted, decreasing = F),])
conf_interval2
conf_interval
##### Linear regression (x: predicted, y: distance) #####
model <- stats::lm(data$distance ~ data$predicted)
newx = seq(min(data$predicted), max(data$predicted), by = 0.1)
suppressWarnings(conf_interval <- stats::predict(model, newdata=data.frame(x=newx), interval="confidence", level = 0.95))
newx
conf_interval
##### Linear regression (x: predicted, y: distance) #####
model <- stats::lm(data$distance ~ data$predicted)
newx = seq(min(data$predicted), max(data$predicted), by = 1)
suppressWarnings(conf_interval <- stats::predict(model, newdata=data.frame(x=newx), interval="confidence", level = 0.95))
conf_interval
data$predicted
conf_interval2 <- as.data.frame(cbind(data$predicted, conf_interval)[order(data$predicted, decreasing = F),])
conf_interval2
newx
data$predicted
##### Linear regression (x: predicted, y: distance) #####
model <- stats::lm(data$distance ~ data$predicted)
newx = seq(min(data$predicted), max(data$predicted), by = 0.1)
suppressWarnings(conf_interval <- stats::predict(model, newdata=data.frame(x=newx), interval="confidence", level = 0.95))
conf_interval2 <- as.data.frame(cbind(data$predicted, conf_interval)[order(data$predicted, decreasing = F),])
names(conf_interval2)[1] <- "predicted"
summary(model)
names(summary(model))
summary(model)$coefficients
model
names(summary(model)$coefficients)
summary(model)$coefficients[1]
summary(model)$coefficients[,1]
summary(model)$coefficients[1,1]
summary(model)$coefficients[2,1]
intercept <- formatC(summary(model)$coefficients[1,1], digits=2)
coefficient <- formatC(summary(model)$coefficients[2,1], digits=2)
interceptlab <- bquote(paste("y = ", .(intercept), " + ", coefficient, " x", sep=""))
equationlab <- bquote(paste("y = ", .(intercept), " + ", coefficient, " x", sep=""))
equationlab
equationlab <- bquote(paste("y = ", .(intercept), " + ", .(coefficient), " x", sep=""))
equationlab
glist[[i]] <- ggplot(data, aes(x=predicted, y=distance)) +
geom_smooth(method="lm", color = "steelblue", fill = "steelblue") +
geom_point(size=0.8, alpha=0.5) +
annotate("text", x=min_axis_x+range_x*0.05, y=max_axis_y-range_y*0.05,
label=equationlab, size=ps/ggplot2::.pt) +
annotate("text", x=min_axis_x+range_x*0.05, y=max_axis_y-range_y*0.17,
label=r2lab, size=ps/ggplot2::.pt) +
ggpubr::stat_regline_equation(label.x=min_axis_x+range_x*0.05, label.y=max_axis_y-range_y*0.05, size=ps/ggplot2::.pt) +
ggpubr::stat_cor(aes(label=..rr.label..), digits = 2, label.x=min_axis_x+range_x*0.05, label.y=max_axis_y-range_y*0.17, size=ps/ggplot2::.pt) +
coord_cartesian(xlim=c(min_axis_x, max_axis_x), ylim=c(min_axis_y, max_axis_y), clip='on') +
theme_plot2 +
theme(plot.title = element_text(size=ps, face = "bold"),
axis.title=element_text(size=ps),
axis.text=element_text(size=ps),
plot.tag = element_text(size = 12, face = "bold"),
plot.margin=unit(c(3,3,3,3), 'mm')) +
labs(title = titles,
x=label_x,
y = label_y)
r2 <- formatC(summary(model)$r.squared, digits=2)
r2lab <- bquote(paste(R^2, " = ", .(r2), sep=""))
glist[[i]] <- ggplot(data, aes(x=predicted, y=distance)) +
geom_smooth(method="lm", color = "steelblue", fill = "steelblue") +
geom_point(size=0.8, alpha=0.5) +
annotate("text", x=min_axis_x+range_x*0.05, y=max_axis_y-range_y*0.05,
label=equationlab, size=ps/ggplot2::.pt) +
annotate("text", x=min_axis_x+range_x*0.05, y=max_axis_y-range_y*0.17,
label=r2lab, size=ps/ggplot2::.pt) +
ggpubr::stat_regline_equation(label.x=min_axis_x+range_x*0.05, label.y=max_axis_y-range_y*0.05, size=ps/ggplot2::.pt) +
ggpubr::stat_cor(aes(label=..rr.label..), digits = 2, label.x=min_axis_x+range_x*0.05, label.y=max_axis_y-range_y*0.17, size=ps/ggplot2::.pt) +
coord_cartesian(xlim=c(min_axis_x, max_axis_x), ylim=c(min_axis_y, max_axis_y), clip='on') +
theme_plot2 +
theme(plot.title = element_text(size=ps, face = "bold"),
axis.title=element_text(size=ps),
axis.text=element_text(size=ps),
plot.tag = element_text(size = 12, face = "bold"),
plot.margin=unit(c(3,3,3,3), 'mm')) +
labs(title = titles,
x=label_x,
y = label_y)
glist[[i]] <- ggplot(data, aes(x=predicted, y=distance)) +
geom_smooth(method="lm", color = "steelblue", fill = "steelblue") +
geom_point(size=0.8, alpha=0.5) +
annotate("text", x=min_axis_x+range_x*0.05, y=max_axis_y-range_y*0.05,
label=equationlab, size=ps/ggplot2::.pt) +
annotate("text", x=min_axis_x+range_x*0.05, y=max_axis_y-range_y*0.17,
label=r2lab, size=ps/ggplot2::.pt) +
#ggpubr::stat_regline_equation(label.x=min_axis_x+range_x*0.05, label.y=max_axis_y-range_y*0.05, size=ps/ggplot2::.pt) +
#ggpubr::stat_cor(aes(label=..rr.label..), digits = 2, label.x=min_axis_x+range_x*0.05, label.y=max_axis_y-range_y*0.17, size=ps/ggplot2::.pt) +
coord_cartesian(xlim=c(min_axis_x, max_axis_x), ylim=c(min_axis_y, max_axis_y), clip='on') +
theme_plot2 +
theme(plot.title = element_text(size=ps, face = "bold"),
axis.title=element_text(size=ps),
axis.text=element_text(size=ps),
plot.tag = element_text(size = 12, face = "bold"),
plot.margin=unit(c(3,3,3,3), 'mm')) +
labs(title = titles,
x=label_x,
y = label_y)
glist[[i]]
conf_interval2
glist[[i]] <- ggplot(data, aes(x=predicted, y=distance)) +
#geom_smooth(method="lm", color = "steelblue", fill = "steelblue") +
geom_line(data = conf_interval2, aes(x=predicted, y=fit), color = "steelblue", size = 1) +
geom_ribbon(data = conf_interval2, aes(x=predicted, ymin = lwr, ymax = upr), alpha = 0.4, fill = "steelblue") +
geom_point(size=0.8, alpha=0.5) +
annotate("text", x=min_axis_x+range_x*0.05, y=max_axis_y-range_y*0.05,
label=equationlab, size=ps/ggplot2::.pt) +
annotate("text", x=min_axis_x+range_x*0.05, y=max_axis_y-range_y*0.17,
label=r2lab, size=ps/ggplot2::.pt) +
#ggpubr::stat_regline_equation(label.x=min_axis_x+range_x*0.05, label.y=max_axis_y-range_y*0.05, size=ps/ggplot2::.pt) +
#ggpubr::stat_cor(aes(label=..rr.label..), digits = 2, label.x=min_axis_x+range_x*0.05, label.y=max_axis_y-range_y*0.17, size=ps/ggplot2::.pt) +
coord_cartesian(xlim=c(min_axis_x, max_axis_x), ylim=c(min_axis_y, max_axis_y), clip='on') +
theme_plot2 +
theme(plot.title = element_text(size=ps, face = "bold"),
axis.title=element_text(size=ps),
axis.text=element_text(size=ps),
plot.tag = element_text(size = 12, face = "bold"),
plot.margin=unit(c(3,3,3,3), 'mm')) +
labs(title = titles,
x=label_x,
y = label_y)
glist[[i]]
glist[[i]] <- ggplot() +
#geom_smooth(method="lm", color = "steelblue", fill = "steelblue") +
geom_line(data = conf_interval2, aes(x=predicted, y=fit), color = "steelblue", size = 1) +
geom_ribbon(data = conf_interval2, aes(x=predicted, ymin = lwr, ymax = upr), alpha = 0.4, fill = "steelblue") +
geom_point(data = data, size=0.8, alpha=0.5) +
annotate("text", x=min_axis_x+range_x*0.05, y=max_axis_y-range_y*0.05,
label=equationlab, size=ps/ggplot2::.pt) +
annotate("text", x=min_axis_x+range_x*0.05, y=max_axis_y-range_y*0.17,
label=r2lab, size=ps/ggplot2::.pt) +
#ggpubr::stat_regline_equation(label.x=min_axis_x+range_x*0.05, label.y=max_axis_y-range_y*0.05, size=ps/ggplot2::.pt) +
#ggpubr::stat_cor(aes(label=..rr.label..), digits = 2, label.x=min_axis_x+range_x*0.05, label.y=max_axis_y-range_y*0.17, size=ps/ggplot2::.pt) +
coord_cartesian(xlim=c(min_axis_x, max_axis_x), ylim=c(min_axis_y, max_axis_y), clip='on') +
theme_plot2 +
theme(plot.title = element_text(size=ps, face = "bold"),
axis.title=element_text(size=ps),
axis.text=element_text(size=ps),
plot.tag = element_text(size = 12, face = "bold"),
plot.margin=unit(c(3,3,3,3), 'mm')) +
labs(title = titles,
x=label_x,
y = label_y)
glist[[i]]
glist[[i]] <- ggplot() +
#geom_smooth(method="lm", color = "steelblue", fill = "steelblue") +
geom_line(data = conf_interval2, aes(x=predicted, y=fit), color = "steelblue", size = 1) +
geom_ribbon(data = conf_interval2, aes(x=predicted, ymin = lwr, ymax = upr), alpha = 0.4, fill = "steelblue") +
geom_point(data = data, aes(x=predicted, y=distance), size=0.8, alpha=0.5) +
annotate("text", x=min_axis_x+range_x*0.05, y=max_axis_y-range_y*0.05,
label=equationlab, size=ps/ggplot2::.pt) +
annotate("text", x=min_axis_x+range_x*0.05, y=max_axis_y-range_y*0.17,
label=r2lab, size=ps/ggplot2::.pt) +
#ggpubr::stat_regline_equation(label.x=min_axis_x+range_x*0.05, label.y=max_axis_y-range_y*0.05, size=ps/ggplot2::.pt) +
#ggpubr::stat_cor(aes(label=..rr.label..), digits = 2, label.x=min_axis_x+range_x*0.05, label.y=max_axis_y-range_y*0.17, size=ps/ggplot2::.pt) +
coord_cartesian(xlim=c(min_axis_x, max_axis_x), ylim=c(min_axis_y, max_axis_y), clip='on') +
theme_plot2 +
theme(plot.title = element_text(size=ps, face = "bold"),
axis.title=element_text(size=ps),
axis.text=element_text(size=ps),
plot.tag = element_text(size = 12, face = "bold"),
plot.margin=unit(c(3,3,3,3), 'mm')) +
labs(title = titles,
x=label_x,
y = label_y)
glist[[i]]
glist[[i]] <- ggplot(data, aes(x=predicted, y=distance)) +
geom_smooth(method="lm", color = "steelblue", fill = "steelblue") +
geom_point(size=0.8, alpha=0.5) +
annotate("text", x=min_axis_x+range_x*0.05, y=max_axis_y-range_y*0.05,
label=equationlab, size=ps/ggplot2::.pt) +
annotate("text", x=min_axis_x+range_x*0.05, y=max_axis_y-range_y*0.17,
label=r2lab, size=ps/ggplot2::.pt) +
#ggpubr::stat_regline_equation(label.x=min_axis_x+range_x*0.05, label.y=max_axis_y-range_y*0.05, size=ps/ggplot2::.pt) +
#ggpubr::stat_cor(aes(label=..rr.label..), digits = 2, label.x=min_axis_x+range_x*0.05, label.y=max_axis_y-range_y*0.17, size=ps/ggplot2::.pt) +
coord_cartesian(xlim=c(min_axis_x, max_axis_x), ylim=c(min_axis_y, max_axis_y), clip='on') +
theme_plot2 +
theme(plot.title = element_text(size=ps, face = "bold"),
axis.title=element_text(size=ps),
axis.text=element_text(size=ps),
plot.tag = element_text(size = 12, face = "bold"),
plot.margin=unit(c(3,3,3,3), 'mm')) +
labs(title = titles,
x=label_x,
y = label_y)
glist[[i]]
help(geom_smooth)
r2 <- formatC(summary(model)$r.squared, digits=2)
r2lab <- bquote(paste(italic(R^2), " = ", .(r2), sep=""))
glist[[i]] <- ggplot(data, aes(x=predicted, y=distance)) +
geom_smooth(method="lm", color = "steelblue", fill = "steelblue") +
geom_point(size=0.8, alpha=0.5) +
annotate("text", x=min_axis_x+range_x*0.05, y=max_axis_y-range_y*0.05,
label=equationlab, size=ps/ggplot2::.pt) +
annotate("text", x=min_axis_x+range_x*0.05, y=max_axis_y-range_y*0.17,
label=r2lab, size=ps/ggplot2::.pt) +
coord_cartesian(xlim=c(min_axis_x, max_axis_x), ylim=c(min_axis_y, max_axis_y), clip='on') +
theme_plot2 +
theme(plot.title = element_text(size=ps, face = "bold"),
axis.title=element_text(size=ps),
axis.text=element_text(size=ps),
plot.tag = element_text(size = 12, face = "bold"),
plot.margin=unit(c(3,3,3,3), 'mm')) +
labs(title = titles,
x=label_x,
y = label_y)
glist[[i]]
intercept <- formatC(summary(model)$coefficients[1,1], digits=2)
coefficient <- formatC(summary(model)$coefficients[2,1], digits=2)
equationlab <- bquote(paste(italic(y), " = ", .(intercept), " + ", .(coefficient), " ", italic(x), sep=""))
glist[[i]] <- ggplot(data, aes(x=predicted, y=distance)) +
geom_smooth(method="lm", color = "steelblue", fill = "steelblue") +
geom_point(size=0.8, alpha=0.5) +
annotate("text", x=min_axis_x+range_x*0.05, y=max_axis_y-range_y*0.05,
label=equationlab, size=ps/ggplot2::.pt) +
annotate("text", x=min_axis_x+range_x*0.05, y=max_axis_y-range_y*0.17,
label=r2lab, size=ps/ggplot2::.pt) +
coord_cartesian(xlim=c(min_axis_x, max_axis_x), ylim=c(min_axis_y, max_axis_y), clip='on') +
theme_plot2 +
theme(plot.title = element_text(size=ps, face = "bold"),
axis.title=element_text(size=ps),
axis.text=element_text(size=ps),
plot.tag = element_text(size = 12, face = "bold"),
plot.margin=unit(c(3,3,3,3), 'mm')) +
labs(title = titles,
x=label_x,
y = label_y)
glist[[i]]
data <- df
range_x <- diff(range(df$predicted))
min_axis_x <- min(df$predicted)
max_axis_x <- max(df$predicted)
range_y <- diff(range(df$distance))
min_axis_y <- min(df$distance) - range_y*0.1
max_axis_y <- max(df$distance) + range_y*0.1
model <- stats::lm(data$distance ~ data$predicted)
r2 <- formatC(summary(model)$r.squared, digits=2)
r2lab <- bquote(paste(italic(R^2), " = ", .(r2), sep=""))
r2lab
intercept <- formatC(summary(model)$coefficients[1,1], digits=2)
coefficient <- formatC(summary(model)$coefficients[2,1], digits=2)
equationlab <- bquote(paste(italic(y), " = ", .(intercept), " + ", .(coefficient), " ", italic(x), sep=""))
equationlab
glist[[length(cell_list) + 1]] <- ggplot(data, aes(x=predicted, y=distance)) +
geom_smooth(method="lm", color = "steelblue", fill = "steelblue") +
geom_point(size=0.8, alpha=0.5) +
annotate("text", x=min_axis_x+range_x*0.05, y=max_axis_y-range_y*0.05,
label=equationlab, size=ps/ggplot2::.pt) +
annotate("text", x=min_axis_x+range_x*0.05, y=max_axis_y-range_y*0.17,
label=r2lab, size=ps/ggplot2::.pt) +
coord_cartesian(xlim=c(min_axis_x, max_axis_x), ylim=c(min_axis_y, max_axis_y), clip='on') +
theme_plot2 +
theme(plot.title = element_text(size=ps, face = "bold"),
axis.title=element_text(size=ps),
axis.text=element_text(size=ps),
plot.tag = element_text(size = 12, face = "bold"),
plot.margin=unit(c(3,3,3,3), 'mm')) +
labs(title = titles,
x=label_x,
y = label_y)
glist[[length(cell_list) + 1]]
### Install the package
devtools::document()
glist <- lm_signal(cell_list = cell_list, mvtime = chloroplast_mvtime,
ex_name = "microbeam", unit1 = "micrometer", unit2 = "min")
g <- glist[[1]] + glist[[2]] + glist[[3]] + glist[[4]] + glist[[5]] + glist[[6]] +
patchwork::plot_layout(ncol = 3)
out <- "07_lm_signal"
if(file.exists(out)==FALSE){
dir.create(out, recursive=TRUE)
}
suppressWarnings(ggplot2::ggsave(paste0(out, "/individual_chloroplast_lm_signal.pdf"),
g, height = 110, width = 50*3, units = "mm"))
### Install the package
devtools::document()
glist <- lm_signal(cell_list = cell_list, mvtime = chloroplast_mvtime,
ex_name = "microbeam", unit1 = "micrometer", unit2 = "min")
g <- glist[[1]] + glist[[2]] + glist[[3]] + glist[[4]] + glist[[5]] + glist[[6]] +
patchwork::plot_layout(ncol = 3)
suppressWarnings(ggplot2::ggsave(paste0(out, "/individual_chloroplast_lm_signal.pdf"),
g, height = 110, width = 50*3, units = "mm"))
glist <- lm_signal(cell_list = cell_list, mvtime = chloroplast_mvtime,
ex_name = "microbeam", unit1 = "micrometer", unit2 = "min")
g <- glist[[1]] + glist[[2]] + glist[[3]] + glist[[4]] + glist[[5]] + glist[[6]] +
patchwork::plot_layout(ncol = 3)
suppressWarnings(ggplot2::ggsave(paste0(out, "/individual_chloroplast_lm_signal.pdf"),
g, height = 110, width = 50*3, units = "mm"))
glist <- lm_signal(cell_list = cell_list, mvtime = chloroplast_mvtime,
ex_name = "microbeam", unit1 = "micrometer", unit2 = "min")
g <- glist[[1]] + glist[[2]] + glist[[3]] + glist[[4]] + glist[[5]] + glist[[6]] +
patchwork::plot_layout(ncol = 3)
suppressWarnings(ggplot2::ggsave(paste0(out, "/individual_chloroplast_lm_signal.pdf"),
g, height = 110, width = 50*3, units = "mm"))
### Install the package
devtools::document()
glist <- lm_signal(cell_list = cell_list, mvtime = chloroplast_mvtime,
ex_name = "microbeam", unit1 = "micrometer", unit2 = "min")
g <- glist[[1]] + glist[[2]] + glist[[3]] + glist[[4]] + glist[[5]] + glist[[6]] +
patchwork::plot_layout(ncol = 3)
suppressWarnings(ggplot2::ggsave(paste0(out, "/individual_chloroplast_lm_signal.pdf"),
g, height = 110, width = 50*3, units = "mm"))
### Install the package
devtools::document()
glist <- lm_signal(cell_list = cell_list, mvtime = chloroplast_mvtime,
ex_name = "microbeam", unit1 = "micrometer", unit2 = "min")
g <- glist[[1]] + glist[[2]] + glist[[3]] + glist[[4]] + glist[[5]] + glist[[6]] +
patchwork::plot_layout(ncol = 3)
suppressWarnings(ggplot2::ggsave(paste0(out, "/individual_chloroplast_lm_signal.pdf"),
g, height = 110, width = 50*3, units = "mm"))
format(summary(model)$coefficients[1,1], digits=2)
intercept <- format(summary(model)$coefficients[1,1], digits=2, nsmall = 2)
intercept
coefficient <- formatC(summary(model)$coefficients[2,1], digits=2, nsmall = 2)
coefficient <- format(summary(model)$coefficients[2,1], digits=2, nsmall = 2)
coefficient
### Install the package
devtools::document()
glist <- lm_signal(cell_list = cell_list, mvtime = chloroplast_mvtime,
ex_name = "microbeam", unit1 = "micrometer", unit2 = "min")
g <- glist[[1]] + glist[[2]] + glist[[3]] + glist[[4]] + glist[[5]] + glist[[6]] +
patchwork::plot_layout(ncol = 3)
suppressWarnings(ggplot2::ggsave(paste0(out, "/individual_chloroplast_lm_signal.pdf"),
g, height = 110, width = 50*3, units = "mm"))
coefficient
as.numeric(coefficient)
as.numeric(coefficient) < 0
summary(model)$coefficients[2,1]
-summary(model)$coefficients[2,1]
coefficient <- format(-summary(model)$coefficients[2,1], digits=2, nsmall = 2)
coefficient
### Install the package
devtools::document()
glist <- lm_signal(cell_list = cell_list, mvtime = chloroplast_mvtime,
ex_name = "microbeam", unit1 = "micrometer", unit2 = "min")
g <- glist[[1]] + glist[[2]] + glist[[3]] + glist[[4]] + glist[[5]] + glist[[6]] +
patchwork::plot_layout(ncol = 3)
suppressWarnings(ggplot2::ggsave(paste0(out, "/individual_chloroplast_lm_signal.pdf"),
g, height = 110, width = 50*3, units = "mm"))
### Install the package
devtools::document()
glist <- lm_signal(cell_list = cell_list, mvtime = chloroplast_mvtime,
ex_name = "microbeam", unit1 = "micrometer", unit2 = "min")
g <- glist[[1]] + glist[[2]] + glist[[3]] + glist[[4]] + glist[[5]] + glist[[6]] +
patchwork::plot_layout(ncol = 3)
suppressWarnings(ggplot2::ggsave(paste0(out, "/individual_chloroplast_lm_signal.pdf"),
g, height = 110, width = 50*3, units = "mm"))
