}
if((start_time - df$time[which(df$`b_ex_15%` > 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_15%` > 0)][1]
end_time <- df$time[which(df$`b_ex_15%` > 0)][length(which(df$`b_ex_15%` > 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_20%` > 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_20%` > 0)][1]
end_time <- df$time[which(df$`b_ex_20%` > 0)][length(which(df$`b_ex_20%` > 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_25%` > 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_25%` > 0)][1]
end_time <- df$time[which(df$`b_ex_25%` > 0)][length(which(df$`b_ex_25%` > 0))] + 1
move_time <- end_time - start_time
}
}else if(length(which(df$`b_ex_10%` > 0)) > 0){
start_time <- df$time[which(df$`b_ex_10%` > 0)][1]
end_time <- df$time[which(df$`b_ex_10%` > 0)][length(which(df$`b_ex_10%` > 0))] + 1
move_time <- end_time - start_time
if((start_time - df$time[which(df$`b_ex_15%` > 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_15%` > 0)][1]
end_time <- df$time[which(df$`b_ex_15%` > 0)][length(which(df$`b_ex_15%` > 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_20%` > 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_20%` > 0)][1]
end_time <- df$time[which(df$`b_ex_20%` > 0)][length(which(df$`b_ex_20%` > 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_25%` > 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_25%` > 0)][1]
end_time <- df$time[which(df$`b_ex_25%` > 0)][length(which(df$`b_ex_25%` > 0))] + 1
move_time <- end_time - start_time
}
}else if(length(which(df$`b_ex_15%` > 0)) > 0){
start_time <- df$time[which(df$`b_ex_15%` > 0)][1]
end_time <- df$time[which(df$`b_ex_15%` > 0)][length(which(df$`b_ex_15%` > 0))] + 1
move_time <- end_time - start_time
if((start_time - df$time[which(df$`b_ex_20%` > 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_20%` > 0)][1]
end_time <- df$time[which(df$`b_ex_20%` > 0)][length(which(df$`b_ex_20%` > 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_25%` > 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_25%` > 0)][1]
end_time <- df$time[which(df$`b_ex_25%` > 0)][length(which(df$`b_ex_25%` > 0))] + 1
move_time <- end_time - start_time
}
}else if(length(which(df$`b_ex_20%` > 0)) > 0){
start_time <- df$time[which(df$`b_ex_20%` > 0)][1]
end_time <- df$time[which(df$`b_ex_20%` > 0)][length(which(df$`b_ex_20%` > 0))] + 1
move_time <- end_time - start_time
if((start_time - df$time[which(df$`b_ex_25%` > 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_25%` > 0)][1]
end_time <- df$time[which(df$`b_ex_25%` > 0)][length(which(df$`b_ex_25%` > 0))] + 1
move_time <- end_time - start_time
}
}else if(length(which(df$`b_ex_25%` > 0)) > 0){
start_time <- df$time[which(df$`b_ex_25%` > 0)][1]
end_time <- df$time[which(df$`b_ex_25%` > 0)][length(which(df$`b_ex_25%` > 0))] + 1
move_time <- end_time - start_time
}else{
start_time <- Inf
end_time <- Inf
move_time <- Inf
}
}else{  # ex_sign == "negative"
if(length(which(df$`b_ex_97.5%` < 0)) > 0){
start_time <- df$time[which(df$`b_ex_97.5%` < 0)][1]
end_time <- df$time[which(df$`b_ex_97.5%` < 0)][length(which(df$`b_ex_97.5%` < 0))] + 1
move_time <- end_time - start_time
if((start_time - df$time[which(df$`b_ex_95%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_95%` < 0)][1]
end_time <- df$time[which(df$`b_ex_95%` < 0)][length(which(df$`b_ex_95%` < 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_90%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_90%` < 0)][1]
end_time <- df$time[which(df$`b_ex_90%` < 0)][length(which(df$`b_ex_90%` < 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_85%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_85%` < 0)][1]
end_time <- df$time[which(df$`b_ex_85%` < 0)][length(which(df$`b_ex_85%` < 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_80%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_80%` < 0)][1]
end_time <- df$time[which(df$`b_ex_80%` < 0)][length(which(df$`b_ex_80%` < 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_75%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_75%` < 0)][1]
end_time <- df$time[which(df$`b_ex_75%` < 0)][length(which(df$`b_ex_75%` < 0))] + 1
move_time <- end_time - start_time
}
}else if(length(which(df$`b_ex_95%` < 0)) > 0){
start_time <- df$time[which(df$`b_ex_95%` < 0)][1]
end_time <- df$time[which(df$`b_ex_95%` < 0)][length(which(df$`b_ex_95%` < 0))] + 1
move_time <- end_time - start_time
if((start_time - df$time[which(df$`b_ex_90%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_90%` < 0)][1]
end_time <- df$time[which(df$`b_ex_90%` < 0)][length(which(df$`b_ex_90%` < 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_85%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_85%` < 0)][1]
end_time <- df$time[which(df$`b_ex_85%` < 0)][length(which(df$`b_ex_85%` < 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_80%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_80%` < 0)][1]
end_time <- df$time[which(df$`b_ex_80%` < 0)][length(which(df$`b_ex_80%` < 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_75%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_75%` < 0)][1]
end_time <- df$time[which(df$`b_ex_75%` < 0)][length(which(df$`b_ex_75%` < 0))] + 1
move_time <- end_time - start_time
}
}else if(length(which(df$`b_ex_90%` < 0)) > 0){
start_time <- df$time[which(df$`b_ex_90%` < 0)][1]
end_time <- df$time[which(df$`b_ex_90%` < 0)][length(which(df$`b_ex_90%` < 0))] + 1
move_time <- end_time - start_time
if((start_time - df$time[which(df$`b_ex_85%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_85%` < 0)][1]
end_time <- df$time[which(df$`b_ex_85%` < 0)][length(which(df$`b_ex_85%` < 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_80%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_80%` < 0)][1]
end_time <- df$time[which(df$`b_ex_80%` < 0)][length(which(df$`b_ex_80%` < 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_75%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_75%` < 0)][1]
end_time <- df$time[which(df$`b_ex_75%` < 0)][length(which(df$`b_ex_75%` < 0))] + 1
move_time <- end_time - start_time
}
}else if(length(which(df$`b_ex_85%` < 0)) > 0){
start_time <- df$time[which(df$`b_ex_85%` < 0)][1]
end_time <- df$time[which(df$`b_ex_85%` < 0)][length(which(df$`b_ex_85%` < 0))] + 1
move_time <- end_time - start_time
if((start_time - df$time[which(df$`b_ex_80%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_80%` < 0)][1]
end_time <- df$time[which(df$`b_ex_80%` < 0)][length(which(df$`b_ex_80%` < 0))] + 1
move_time <- end_time - start_time
}
if((start_time - df$time[which(df$`b_ex_75%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_75%` < 0)][1]
end_time <- df$time[which(df$`b_ex_75%` < 0)][length(which(df$`b_ex_75%` < 0))] + 1
move_time <- end_time - start_time
}
}else if(length(which(df$`b_ex_80%` < 0)) > 0){
start_time <- df$time[which(df$`b_ex_80%` < 0)][1]
end_time <- df$time[which(df$`b_ex_80%` < 0)][length(which(df$`b_ex_80%` < 0))] + 1
move_time <- end_time - start_time
if((start_time - df$time[which(df$`b_ex_75%` < 0)][1]) > ex_period/start_sensitivity){
start_time <- df$time[which(df$`b_ex_75%` < 0)][1]
end_time <- df$time[which(df$`b_ex_75%` < 0)][length(which(df$`b_ex_75%` < 0))] + 1
move_time <- end_time - start_time
}
}else if(length(which(df$`b_ex_75%` < 0)) > 0){
start_time <- df$time[which(df$`b_ex_75%` < 0)][1]
end_time <- df$time[which(df$`b_ex_75%` < 0)][length(which(df$`b_ex_75%` < 0))] + 1
move_time <- end_time - start_time
}else{
start_time <- Inf
end_time <- Inf
move_time <- Inf
}
}
mv_time <- data.frame(start_time = start_time, end_time = end_time, move_time = move_time)
df_mv <- rbind(df_mv, mv_time)
df_mv
# Visual
if(!is.null(visual)){
if(!is.null(df_idx) & !is.null(res_idx)){
vis <- dplyr::filter(visual, cell == df_idx & index == res_idx)$time
}else{
vis <- dplyr::filter(visual, cell == i & index == j)$time
}
label_statistical <- "Statistical"
label_visual <- "Visual"
}else{
vis <- NULL
label_statistical <- NULL
label_visual <- NULL
}
# Shade
if(shade == T){
alpha = 0.3
}else{
alpha = 0
}
# Start time
if(start_line == T){
col1 = "orange"
col2 = "aquamarine3"
}else{
col1 = "transparent"
col2 = "transparent"
}
# Theme
if(theme_plot == "bw"){
theme_plot2 <- theme_bw(base_size = ps)
}else if(theme_plot == "light"){
theme_plot2 <- theme_light(base_size = ps)
}else if(theme_plot == "classic"){
theme_plot2 <- theme_classic(base_size = ps)
}else if(theme_plot == "gray"){
theme_plot2 <- theme_gray(base_size = ps)
}else if(theme_plot == "dark"){
theme_plot2 <- theme_dark(base_size = ps)
}else if(theme_plot == "test"){
theme_plot2 <- theme_test(base_size = ps)
}else if(theme_plot == "minimal"){
theme_plot2 <- theme_minimal(base_size = ps)
}else if(theme_plot == "void"){
theme_plot2 <- theme_void(base_size = ps)
}
library(ggplot2)
# Theme
if(theme_plot == "bw"){
theme_plot2 <- theme_bw(base_size = ps)
}else if(theme_plot == "light"){
theme_plot2 <- theme_light(base_size = ps)
}else if(theme_plot == "classic"){
theme_plot2 <- theme_classic(base_size = ps)
}else if(theme_plot == "gray"){
theme_plot2 <- theme_gray(base_size = ps)
}else if(theme_plot == "dark"){
theme_plot2 <- theme_dark(base_size = ps)
}else if(theme_plot == "test"){
theme_plot2 <- theme_test(base_size = ps)
}else if(theme_plot == "minimal"){
theme_plot2 <- theme_minimal(base_size = ps)
}else if(theme_plot == "void"){
theme_plot2 <- theme_void(base_size = ps)
}
# label
if(unit1=="meter"){
label_y <- bquote(atop(paste("Distance of ", .(res_name)), paste("from ", .(ex_name), " ", (m))))
label_alpha <- bquote(atop("Velocity of movement", (m/.(unit2))))
label_beta <- bquote(atop(paste("Coefficient of ", .(ex_name)), (m/.(unit2))))
label_random <- bquote(atop("Random fluctuation", (m/.(unit2))))
}else if(unit1=="centimeter"){
label_y <- bquote(atop(paste("Distance of ", .(res_name)), paste("from ", .(ex_name), " ", (cm))))
label_alpha <- bquote(atop("Velocity of movement", (cm/.(unit2))))
label_beta <- bquote(atop(paste("Coefficient of ", .(ex_name)), (cm/.(unit2))))
label_random <- bquote(atop("Random fluctuation", (cm/.(unit2))))
}else if(unit1=="millimeter"){
label_y <- bquote(atop(paste("Distance of ", .(res_name)), paste("from ", .(ex_name), " ", (mm))))
label_alpha <- bquote(atop("Velocity of movement", (mm/.(unit2))))
label_beta <- bquote(atop(paste("Coefficient of ", .(ex_name)), (mm/.(unit2))))
label_random <- bquote(atop("Random fluctuation", (mm/.(unit2))))
}else if(unit1=="micrometer"){
label_y <- bquote(atop(paste("Distance of ", .(res_name)), paste("from ", .(ex_name), " ", (mu*m))))
label_alpha <- bquote(atop("Velocity of movement", (mu*m/.(unit2))))
label_beta <- bquote(atop(paste("Coefficient of ", .(ex_name)), (mu*m/.(unit2))))
label_random <- bquote(atop("Random fluctuation", (mu*m/.(unit2))))
}else if(unit1=="nanometer"){
label_y <- bquote(atop(paste("Distance of ", .(res_name)), paste("from ", .(ex_name), " ", (nm))))
label_alpha <- bquote(atop("Velocity of movement", (nm/.(unit2))))
label_beta <- bquote(atop(paste("Coefficient of ", .(ex_name)), (nm/.(unit2))))
label_random <- bquote(atop("Random fluctuation", (nm/.(unit2))))
}else{
label_y <- bquote(atop(paste("Distance of ", .(res_name)), paste("from ", .(ex_name), " (",  .(unit1), ")")))
label_alpha <- bquote(atop("Velocity of movement", (.(unit1)/.(unit2))))
label_beta <- bquote(atop(paste("Coefficient of ", .(ex_name)), paste("(", .(unit1), " / ", .(unit2), ")")))
label_random <- bquote(atop("Random fluctuation", paste("(", .(unit1), " / ", .(unit2), ")")))
}
# Title of the plots
if(length(cell_list) == 1){
if(!is.null(df_idx) & !is.null(res_idx)){
titles <- paste(stringr::str_to_title(res_name), " ", res_idx, sep="")
}else{
titles <- paste(stringr::str_to_title(res_name), " ", j, sep="")
}
}else{
if(!is.null(df_idx) & !is.null(res_idx)){
titles <- paste(stringr::str_to_title(df_name), " ", df_idx, ", ", res_name, " ", res_idx, sep="")
}else{
titles <- paste(stringr::str_to_title(df_name), " ", i, ", ", res_name, " ", j, sep="")
}
}
titles
# X-axis min and max of shade
shade_xmin <- min(cell_list[[i]]$time[cell_list[[i]]$ex == 0])
shade_xmax <- max(cell_list[[i]]$time[cell_list[[i]]$ex == 0])
zero_time <- (cell_list[[i]]$time[cell_list[[i]]$ex == 0])
boundary1 <- zero_time[which(diff(zero_time) != 1)]
boundary2 <- zero_time[which(diff(zero_time) != 1)+1]
shade_xmin <- c(shade_xmin, boundary2)
shade_xmax <- c(boundary1, shade_xmax)
# Location of text
text_x1 <- max(cell_list[[i]]$time) - (max(cell_list[[i]]$time) - min(cell_list[[i]]$time)) * 0.13
text_x2 <- max(cell_list[[i]]$time) - (max(cell_list[[i]]$time) - min(cell_list[[i]]$time)) * 0.16
# Title of the plots
if(length(cell_list) == 1){
if(!is.null(df_idx) & !is.null(res_idx)){
titles <- paste(stringr::str_to_title(df_name), " ", df_idx, ", ", res_name, " ", res_idx, sep="")
}else{
titles <- paste(stringr::str_to_title(res_name), " ", j, sep="")
}
}else{
if(!is.null(df_idx) & !is.null(res_idx)){
titles <- paste(stringr::str_to_title(df_name), " ", df_idx, ", ", res_name, " ", res_idx, sep="")
}else{
titles <- paste(stringr::str_to_title(df_name), " ", i, ", ", res_name, " ", j, sep="")
}
}
titles
# X-axis min and max of shade
shade_xmin <- min(cell_list[[i]]$time[cell_list[[i]]$ex == 0])
shade_xmax <- max(cell_list[[i]]$time[cell_list[[i]]$ex == 0])
zero_time <- (cell_list[[i]]$time[cell_list[[i]]$ex == 0])
boundary1 <- zero_time[which(diff(zero_time) != 1)]
boundary2 <- zero_time[which(diff(zero_time) != 1)+1]
shade_xmin <- c(shade_xmin, boundary2)
shade_xmax <- c(boundary1, shade_xmax)
# Location of text
text_x1 <- max(cell_list[[i]]$time) - (max(cell_list[[i]]$time) - min(cell_list[[i]]$time)) * 0.13
text_x2 <- max(cell_list[[i]]$time) - (max(cell_list[[i]]$time) - min(cell_list[[i]]$time)) * 0.16
# Distance
ymax <- max(cell_list[[i]][,j+2])
ymin <- min(cell_list[[i]][,j+2])
yrange <- (ymax - ymin)
yceiling <-  ymax + yrange * 0.05
yfloor <- ymin - yrange * 0.05
g_dist <- ggplot(data = cell_list[[i]]) +
annotate("rect", xmin = shade_xmin, xmax = shade_xmax,
ymin = yfloor, ymax = yceiling, alpha = alpha, fill = "gray50") +
geom_line(aes(x = time, y = cell_list[[i]][,j+2]), linewidth=0.5) +
geom_vline(xintercept = mv_time$start_time, linetype="solid", col = col1) +
geom_vline(xintercept = vis, linetype="dashed", col = col2) +
annotate("text", x=text_x1, y=yceiling-yrange*0.08, label=label_statistical, col=col1, size = ps/ggplot2::.pt) +
annotate("text", x=text_x2, y=yceiling-yrange*0.2, label=label_visual, col=col2, size = ps/ggplot2::.pt) +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
theme_plot2 +
theme(legend.position = "none",
axis.title=element_text(size = ps),
axis.title.x=element_blank(),
axis.text = element_text(size = ps),
plot.title = element_text(size = ps, face = "bold")) +
labs(title = titles,
y = label_y)
# alpha
ymax <- max(df$Y)
ymin <- min(df$Y)
yrange <- (ymax - ymin)
yceiling <-  ymax + yrange * 0.05
yfloor <- ymin - yrange * 0.05
g_alpha <- ggplot(data = df, aes(x = time)) +
annotate("rect", xmin = shade_xmin, xmax = shade_xmax,
ymin = yfloor, ymax = yceiling, alpha = alpha, fill = "gray50") +
geom_ribbon(aes(ymin = `alpha_2.5%`, ymax = `alpha_97.5%`), alpha = 0.5) +
geom_line(aes(y = `alpha_50%`), linewidth = 0.5) +
geom_point(aes(y = Y), alpha = 0.5, size=0.5) +
geom_vline(xintercept = mv_time$start_time, linetype="solid", col = col1) +
geom_vline(xintercept = vis, linetype="dashed", col = col2) +
geom_hline(yintercept = 0, linetype="dashed") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
theme_plot2 +
theme(legend.position = "none",
axis.title=element_text(size = ps),
axis.title.x=element_blank(),
axis.text = element_text(size = ps),
plot.title = element_blank()) +
labs(y = label_alpha)
# beta_ex
ymax <- max(df$`b_ex_97.5%`, na.rm = T)
ymin <- min(df$`b_ex_2.5%`, na.rm = T)
yrange <- (ymax - ymin)
yceiling <-  ymax + yrange * 0.05
yfloor <- ymin - yrange * 0.05
g_b_ex <- ggplot(data = df, aes(x = time)) +
annotate("rect", xmin = shade_xmin, xmax = shade_xmax,
ymin = yfloor, ymax = yceiling, alpha = alpha, fill = "gray50") +
geom_ribbon(aes(ymin = `b_ex_2.5%`, ymax = `b_ex_97.5%`), alpha = 0.5) +
geom_line(aes(y = `b_ex_50%`), linewidth = 0.5) +
geom_vline(xintercept = mv_time$start_time, linetype="solid", col = col1) +
geom_vline(xintercept = vis, linetype="dashed", col = col2) +
geom_hline(yintercept = 0, linetype="dashed") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
theme_plot2 +
theme(legend.position = "none",
axis.title=element_text(size = ps),
axis.title.x=element_blank(),
axis.text = element_text(size = ps),
plot.title = element_blank()) +
labs(y = label_beta)
# Random movement
ymax <- max(df$`w_97.5%`)
ymin <- min(df$`w_2.5%`)
yrange <- (ymax - ymin)
yceiling <-  ymax + yrange * 0.05
yfloor <- ymin - yrange * 0.05
g_w <- ggplot(data = df, aes(x = time)) +
annotate("rect", xmin = shade_xmin, xmax = shade_xmax,
ymin = yfloor, ymax = yceiling, alpha = alpha, fill = "gray50") +
geom_ribbon(aes(ymin = `w_2.5%`, ymax = `w_97.5%`), alpha = 0.5) +
geom_line(aes(y = `w_50%`), linewidth = 0.5) +
geom_vline(xintercept = mv_time$start_time, linetype="solid", col = col1) +
geom_vline(xintercept = vis, linetype="dashed", col = col2) +
geom_hline(yintercept = 0, linetype="dashed") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
theme_plot2 +
theme(legend.position = "none",
axis.title=element_text(size = ps),
axis.text = element_text(size = ps),
plot.title = element_blank()) +
labs(x = paste("Time (", unit2, ")", sep=""),
y = label_random)
# Integrate plots
g <- g_dist + g_alpha + g_b_ex + g_w +
plot_layout(ncol = 1, heights = c(1, 1, 1, 1))
library(patchwork)
# Integrate plots
g <- g_dist + g_alpha + g_b_ex + g_w +
plot_layout(ncol = 1, heights = c(1, 1, 1, 1))
suppressWarnings(
ggsave(paste0(out, "/pdf/ssm_individual_", file_name, ".pdf"),
g, height = ps*20*4/4, width = ps*10*1.2, units = "mm")
)
# Check of Rhat
bayesplot::color_scheme_set("viridisC")
bayesplot::bayesplot_theme_set(bayesplot::theme_default(base_size = ps+2, base_family = "sans"))
g <- bayesplot::mcmc_rhat(bayesplot::rhat(fit))
ggsave(paste0(out, "/diagnosis/ssm_individual_rhat_", file_name, ".pdf"),
g, height = ps*20, width = ps*20, units = "mm")
max_rhat <- names(which.max(bayesplot::rhat(fit)))
# Confirmation of convergence
g <- bayesplot::mcmc_combo(
fit$draws(),
combo = c("dens_overlay", "trace"),
widths = c(1, 1),
pars = c("b_ex[1]", paste0("b_ex[", data_list$N_ex, "]"), "alpha[1]", paste0("alpha[", data_list$N, "]"), max_rhat),
gg_theme = theme_classic(base_size = ps+2)
)
ggsave(paste0(out, "/diagnosis/ssm_individual_combo_", file_name, ".pdf"),
g, height = ps*20, width = ps*20, units = "mm")
## Remove temporary files
file.remove(paste0(output_dir, "/", outcsv_name))
## Release memory
rm(fit, tmp_csv, tmp_csv_w, tmp_csv_b_ex, tmp_csv_alpha,
tmp_csv_s_w, tmp_csv_s_b_ex, tmp_csv_s_Y,
df)
gc(reset = T);gc(reset = T)
## Remove the temporary directory
unlink(output_dir, recursive = T)
## Save movement time
if(!is.null(visual)){
df_visual_mv <- cbind(visual, df_mv)
names(df_visual_mv)[1:3] <- c(df_name, res_name, "visual_start_time")
}else{
res <- NULL
cell <- NULL
for(i in 1:length(cell_list)){
res <- c(res, 1:(ncol(cell_list[[i]]) - 2))
cell <- c(cell, rep(i, length = (ncol(cell_list[[i]]) - 2)))
}
df_res_name <- data.frame(cell = cell, res = res)
names(df_res_name) <- c(df_name, res_name)
df_visual_mv <- cbind(df_res_name, df_mv)
}
df_visual_mv
visual[visual$cell==3 & visual$index==8,]
visual = visual[visual$cell==3 & visual$index==8,]
## Save movement time
if(!is.null(visual)){
df_visual_mv <- cbind(visual, df_mv)
names(df_visual_mv)[1:3] <- c(df_name, res_name, "visual_start_time")
}else{
res <- NULL
cell <- NULL
for(i in 1:length(cell_list)){
res <- c(res, 1:(ncol(cell_list[[i]]) - 2))
cell <- c(cell, rep(i, length = (ncol(cell_list[[i]]) - 2)))
}
df_res_name <- data.frame(cell = cell, res = res)
names(df_res_name) <- c(df_name, res_name)
df_visual_mv <- cbind(df_res_name, df_mv)
}
df_visual_mv
### Test the package
devtools::document()
install.packages("../cellssm", repos = NULL, type = "source")
# Load packages
library(cellssm)
# Set the path to which CmdStan was installed
cmdstanr::set_cmdstan_path("~/cmdstan/")
# Load data
data("cell1", "cell2", "cell3", "cell4", "visual")
cell_list <- list(cell1, cell2, cell3, cell4)
cell3 <- as.data.frame(data.table::fread("/Users/hnishio/Documents/児玉先生/変異体/Nishio_trial_230310/data/WT_cell3.csv"))
test<-list(cell3[,c(1,2,10)])
ssm_individual(cell_list = test, visual = visual[visual$cell==3 & visual$index==8,], out = "test",
res_name = "chloroplast", ex_name = "microbeam",
unit1 = "micrometer", unit2 = "min"
df_idx = 3
ssm_individual(cell_list = test, visual = visual[visual$cell==3 & visual$index==8,], out = "test",
res_name = "chloroplast", ex_name = "microbeam",
unit1 = "micrometer", unit2 = "min"
,df_idx = 3,res_idx = 8)
data("Paramecium")
Paramecium
